{
  "version": 3,
  "sources": ["../src/index.ts", "../src/connection/auth.ts", "../src/misc/openidConfigurationGetter.ts", "../src/connection/httpClient.ts", "../src/connection/gqlClient.ts", "../src/connection/index.ts", "../src/graphql/where.ts", "../src/graphql/nearText.ts", "../src/graphql/nearVector.ts", "../src/graphql/nearObject.ts", "../src/validation/number.ts", "../src/validation/commandBase.ts", "../src/graphql/aggregator.ts", "../src/graphql/bm25.ts", "../src/graphql/hybrid.ts", "../src/graphql/nearImage.ts", "../src/graphql/ask.ts", "../src/graphql/group.ts", "../src/graphql/sort.ts", "../src/graphql/generate.ts", "../src/graphql/getter.ts", "../src/graphql/explorer.ts", "../src/graphql/raw.ts", "../src/graphql/index.ts", "../src/schema/classCreator.ts", "../src/validation/string.ts", "../src/schema/classDeleter.ts", "../src/schema/classGetter.ts", "../src/schema/propertyCreator.ts", "../src/schema/getter.ts", "../src/schema/shardsGetter.ts", "../src/schema/shardUpdater.ts", "../src/schema/shardsUpdater.ts", "../src/schema/index.ts", "../src/data/creator.ts", "../src/data/validator.ts", "../src/data/updater.ts", "../src/data/merger.ts", "../src/data/getter.ts", "../src/data/getterById.ts", "../src/data/deleter.ts", "../src/data/checker.ts", "../src/data/referenceCreator.ts", "../src/data/referenceReplacer.ts", "../src/data/referenceDeleter.ts", "../src/data/referencePayloadBuilder.ts", "../src/data/path.ts", "../src/utils/beaconPath.ts", "../src/data/index.ts", "../src/classifications/getter.ts", "../src/classifications/scheduler.ts", "../src/classifications/index.ts", "../src/batch/path.ts", "../src/batch/objectsBatcher.ts", "../src/batch/objectsBatchDeleter.ts", "../src/batch/referencesBatcher.ts", "../src/batch/referencePayloadBuilder.ts", "../src/batch/index.ts", "../src/misc/liveChecker.ts", "../src/misc/readyChecker.ts", "../src/misc/metaGetter.ts", "../src/misc/index.ts", "../src/c11y/extensionCreator.ts", "../src/c11y/conceptsGetter.ts", "../src/c11y/index.ts", "../src/utils/dbVersion.ts", "../src/backup/validation.ts", "../src/backup/backupCreator.ts", "../src/backup/backupCreateStatusGetter.ts", "../src/backup/backupRestorer.ts", "../src/backup/backupRestoreStatusGetter.ts", "../src/backup/index.ts", "../src/cluster/nodesStatusGetter.ts", "../src/cluster/index.ts"],
  "sourcesContent": ["import Connection from './connection';\nimport graphql, { GraphQL } from './graphql';\nimport schema, { Schema } from './schema';\nimport data, { Data } from './data';\nimport classifications, { Classifications } from './classifications';\nimport batch, { Batch } from './batch';\nimport misc, { Misc } from './misc';\nimport c11y, { C11y } from './c11y';\nimport { DbVersionProvider, DbVersionSupport } from './utils/dbVersion';\nimport backup, { Backup } from './backup';\nimport cluster, { Cluster } from './cluster';\nimport {\n  ApiKey,\n  AuthAccessTokenCredentials,\n  AuthClientCredentials,\n  AuthUserPasswordCredentials,\n  OidcAuthenticator,\n} from './connection/auth';\nimport MetaGetter from './misc/metaGetter';\n\nexport interface ConnectionParams {\n  authClientSecret?: AuthClientCredentials | AuthAccessTokenCredentials | AuthUserPasswordCredentials;\n  apiKey?: ApiKey;\n  host: string;\n  scheme: string;\n  headers?: HeadersInit;\n}\n\nexport interface WeaviateClient {\n  graphql: GraphQL;\n  schema: Schema;\n  data: Data;\n  classifications: Classifications;\n  batch: Batch;\n  misc: Misc;\n  c11y: C11y;\n  backup: Backup;\n  cluster: Cluster;\n  oidcAuth?: OidcAuthenticator;\n}\n\nconst app = {\n  client: function (params: ConnectionParams): WeaviateClient {\n    // check if the URL is set\n    if (!params.host) throw new Error('Missing `host` parameter');\n\n    // check if the scheme is set\n    if (!params.scheme) throw new Error('Missing `scheme` parameter');\n\n    // check if headers are set\n    if (!params.headers) params.headers = {};\n\n    const conn = new Connection(params);\n    const dbVersionProvider = initDbVersionProvider(conn);\n    const dbVersionSupport = new DbVersionSupport(dbVersionProvider);\n\n    const ifc: WeaviateClient = {\n      graphql: graphql(conn),\n      schema: schema(conn),\n      data: data(conn, dbVersionSupport),\n      classifications: classifications(conn),\n      batch: batch(conn, dbVersionSupport),\n      misc: misc(conn, dbVersionProvider),\n      c11y: c11y(conn),\n      backup: backup(conn),\n      cluster: cluster(conn),\n    };\n\n    if (conn.oidcAuth) ifc.oidcAuth = conn.oidcAuth;\n\n    return ifc;\n  },\n\n  ApiKey,\n  AuthUserPasswordCredentials,\n  AuthAccessTokenCredentials,\n  AuthClientCredentials,\n};\n\nfunction initDbVersionProvider(conn: Connection) {\n  const metaGetter = new MetaGetter(conn);\n  const versionGetter = () => {\n    return metaGetter\n      .do()\n      .then((result: any) => result.version)\n      .catch(() => Promise.resolve(''));\n  };\n\n  const dbVersionProvider = new DbVersionProvider(versionGetter);\n  dbVersionProvider.refresh();\n\n  return dbVersionProvider;\n}\n\nmodule.exports = app;\nexport default app;\nexport * from './openapi/types';\nexport * from './graphql';\nexport * from './schema';\nexport * from './data';\nexport * from './classifications';\nexport * from './batch';\nexport * from './misc';\nexport * from './c11y';\nexport * from './backup';\nexport * from './cluster';\nexport * from './connection';\n", "import { HttpClient } from './httpClient';\n\ninterface AuthenticatorResult {\n  accessToken: string;\n  expiresAt: number;\n  refreshToken: string;\n}\n\ninterface OidcCredentials {\n  silentRefresh: boolean;\n}\n\nexport interface OidcAuthFlow {\n  refresh: () => Promise<AuthenticatorResult>;\n}\n\nexport class OidcAuthenticator {\n  private readonly http: HttpClient;\n  private readonly creds: OidcCredentials;\n  private accessToken: string;\n  private refreshToken?: string;\n  private expiresAt: number;\n  private refreshRunning: boolean;\n  private refreshInterval!: NodeJS.Timeout;\n\n  constructor(http: HttpClient, creds: any) {\n    this.http = http;\n    this.creds = creds;\n    this.accessToken = '';\n    this.refreshToken = '';\n    this.expiresAt = 0;\n    this.refreshRunning = false;\n\n    // If the authentication method is access token,\n    // our bearer token is already available for use\n    if (this.creds instanceof AuthAccessTokenCredentials) {\n      this.accessToken = this.creds.accessToken;\n      this.expiresAt = this.creds.expiresAt;\n      this.refreshToken = this.creds.refreshToken;\n    }\n  }\n\n  refresh = async (localConfig: any) => {\n    const config = await this.getOpenidConfig(localConfig);\n\n    let authenticator: OidcAuthFlow;\n    switch (this.creds.constructor) {\n      case AuthUserPasswordCredentials:\n        authenticator = new UserPasswordAuthenticator(this.http, this.creds, config);\n        break;\n      case AuthAccessTokenCredentials:\n        authenticator = new AccessTokenAuthenticator(this.http, this.creds, config);\n        break;\n      case AuthClientCredentials:\n        authenticator = new ClientCredentialsAuthenticator(this.http, this.creds, config);\n        break;\n      default:\n        throw new Error('unsupported credential type');\n    }\n\n    return authenticator.refresh().then((resp) => {\n      this.accessToken = resp.accessToken;\n      this.expiresAt = resp.expiresAt;\n      this.refreshToken = resp.refreshToken;\n      this.startTokenRefresh(authenticator);\n    });\n  };\n\n  getOpenidConfig = (localConfig: any) => {\n    return this.http.externalGet(localConfig.href).then((openidProviderConfig: any) => {\n      const scopes = localConfig.scopes || [];\n      return {\n        clientId: localConfig.clientId,\n        provider: openidProviderConfig,\n        scopes: scopes,\n      };\n    });\n  };\n\n  startTokenRefresh = (authenticator: { refresh: () => any }) => {\n    if (this.creds.silentRefresh && !this.refreshRunning && this.refreshTokenProvided()) {\n      this.refreshInterval = setInterval(async () => {\n        // check every 30s if the token will expire in <= 1m,\n        // if so, refresh\n        if (this.expiresAt - Date.now() <= 60_000) {\n          const resp = await authenticator.refresh();\n          this.accessToken = resp.accessToken;\n          this.expiresAt = resp.expiresAt;\n          this.refreshToken = resp.refreshToken;\n        }\n      }, 30_000);\n      this.refreshRunning = true;\n    }\n  };\n\n  stopTokenRefresh = () => {\n    clearInterval(this.refreshInterval);\n    this.refreshRunning = false;\n  };\n\n  refreshTokenProvided = () => {\n    return this.refreshToken && this.refreshToken != '';\n  };\n\n  getAccessToken = () => {\n    return this.accessToken;\n  };\n\n  getExpiresAt = () => {\n    return this.expiresAt;\n  };\n\n  resetExpiresAt() {\n    this.expiresAt = 0;\n  }\n}\n\nexport interface UserPasswordCredentialsInput {\n  username: string;\n  password?: string;\n  scopes?: any[];\n  silentRefresh?: boolean;\n}\n\nexport class AuthUserPasswordCredentials implements OidcCredentials {\n  private username: string;\n  private password?: string;\n  private scopes?: any[];\n  public readonly silentRefresh: boolean;\n  constructor(creds: UserPasswordCredentialsInput) {\n    this.username = creds.username;\n    this.password = creds.password;\n    this.scopes = creds.scopes;\n    this.silentRefresh = parseSilentRefresh(creds.silentRefresh);\n  }\n}\n\ninterface RequestAccessTokenResponse {\n  access_token: string;\n  expires_in: number;\n  refresh_token: string;\n}\n\nclass UserPasswordAuthenticator implements OidcAuthFlow {\n  private creds: any;\n  private http: any;\n  private openidConfig: any;\n  constructor(http: any, creds: any, config: any) {\n    this.http = http;\n    this.creds = creds;\n    this.openidConfig = config;\n    if (creds.scopes) {\n      this.openidConfig.scopes.push(creds.scopes);\n    }\n  }\n\n  refresh = () => {\n    this.validateOpenidConfig();\n    return this.requestAccessToken()\n      .then((tokenResp: RequestAccessTokenResponse) => {\n        return {\n          accessToken: tokenResp.access_token,\n          expiresAt: calcExpirationEpoch(tokenResp.expires_in),\n          refreshToken: tokenResp.refresh_token,\n        };\n      })\n      .catch((err: any) => {\n        return Promise.reject(new Error(`failed to refresh access token: ${err}`));\n      });\n  };\n\n  validateOpenidConfig = () => {\n    if (\n      this.openidConfig.provider.grant_types_supported !== undefined &&\n      !this.openidConfig.provider.grant_types_supported.includes('password')\n    ) {\n      throw new Error('grant_type password not supported');\n    }\n    if (this.openidConfig.provider.token_endpoint.includes('https://login.microsoftonline.com')) {\n      throw new Error(\n        'microsoft/azure recommends to avoid authentication using ' +\n          'username and password, so this method is not supported by this client'\n      );\n    }\n    this.openidConfig.scopes.push('offline_access');\n  };\n\n  requestAccessToken = () => {\n    const url = this.openidConfig.provider.token_endpoint;\n    const params = new URLSearchParams({\n      grant_type: 'password',\n      client_id: this.openidConfig.clientId,\n      username: this.creds.username,\n      password: this.creds.password,\n      scope: this.openidConfig.scopes.join(' '),\n    });\n    const contentType = 'application/x-www-form-urlencoded;charset=UTF-8';\n    return this.http.externalPost(url, params, contentType);\n  };\n}\n\nexport interface AccessTokenCredentialsInput {\n  accessToken: string;\n  expiresIn: number;\n  refreshToken?: string;\n  silentRefresh?: boolean;\n}\n\nexport class AuthAccessTokenCredentials implements OidcCredentials {\n  public readonly accessToken: string;\n  public readonly expiresAt: number;\n  public readonly refreshToken?: string;\n  public readonly silentRefresh: boolean;\n\n  constructor(creds: AccessTokenCredentialsInput) {\n    this.validate(creds);\n    this.accessToken = creds.accessToken;\n    this.expiresAt = calcExpirationEpoch(creds.expiresIn);\n    this.refreshToken = creds.refreshToken;\n    this.silentRefresh = parseSilentRefresh(creds.silentRefresh);\n  }\n\n  validate = (creds: AccessTokenCredentialsInput) => {\n    if (creds.expiresIn === undefined) {\n      throw new Error('AuthAccessTokenCredentials: expiresIn is required');\n    }\n    if (!Number.isInteger(creds.expiresIn) || creds.expiresIn <= 0) {\n      throw new Error('AuthAccessTokenCredentials: expiresIn must be int > 0');\n    }\n  };\n}\n\nclass AccessTokenAuthenticator implements OidcAuthFlow {\n  private creds: any;\n  private http: any;\n  private openidConfig: any;\n  constructor(http: any, creds: any, config: any) {\n    this.http = http;\n    this.creds = creds;\n    this.openidConfig = config;\n  }\n\n  refresh = () => {\n    if (this.creds.refreshToken === undefined || this.creds.refreshToken == '') {\n      console.warn('AuthAccessTokenCredentials not provided with refreshToken, cannot refresh');\n      return Promise.resolve({\n        accessToken: this.creds.accessToken,\n        expiresAt: this.creds.expiresAt,\n      });\n    }\n    this.validateOpenidConfig();\n    return this.requestAccessToken()\n      .then((tokenResp: RequestAccessTokenResponse) => {\n        return {\n          accessToken: tokenResp.access_token,\n          expiresAt: calcExpirationEpoch(tokenResp.expires_in),\n          refreshToken: tokenResp.refresh_token,\n        };\n      })\n      .catch((err: any) => {\n        return Promise.reject(new Error(`failed to refresh access token: ${err}`));\n      });\n  };\n\n  validateOpenidConfig = () => {\n    if (\n      this.openidConfig.provider.grant_types_supported === undefined ||\n      !this.openidConfig.provider.grant_types_supported.includes('refresh_token')\n    ) {\n      throw new Error('grant_type refresh_token not supported');\n    }\n  };\n\n  requestAccessToken = () => {\n    const url = this.openidConfig.provider.token_endpoint;\n    const params = new URLSearchParams({\n      grant_type: 'refresh_token',\n      client_id: this.openidConfig.clientId,\n      refresh_token: this.creds.refreshToken,\n    });\n    const contentType = 'application/x-www-form-urlencoded;charset=UTF-8';\n    return this.http.externalPost(url, params, contentType);\n  };\n}\n\nexport interface ClientCredentialsInput {\n  clientSecret: string;\n  scopes?: any[];\n  silentRefresh?: boolean;\n}\n\nexport class AuthClientCredentials implements OidcCredentials {\n  private clientSecret: any;\n  private scopes?: any[];\n  public readonly silentRefresh: boolean;\n\n  constructor(creds: ClientCredentialsInput) {\n    this.clientSecret = creds.clientSecret;\n    this.scopes = creds.scopes;\n    this.silentRefresh = parseSilentRefresh(creds.silentRefresh);\n  }\n}\n\nclass ClientCredentialsAuthenticator implements OidcAuthFlow {\n  private creds: any;\n  private http: any;\n  private openidConfig: any;\n\n  constructor(http: any, creds: any, config: any) {\n    this.http = http;\n    this.creds = creds;\n    this.openidConfig = config;\n    if (creds.scopes) {\n      this.openidConfig.scopes.push(creds.scopes);\n    }\n  }\n\n  refresh = () => {\n    this.validateOpenidConfig();\n    return this.requestAccessToken()\n      .then((tokenResp: RequestAccessTokenResponse) => {\n        return {\n          accessToken: tokenResp.access_token,\n          expiresAt: calcExpirationEpoch(tokenResp.expires_in),\n          refreshToken: tokenResp.refresh_token,\n        };\n      })\n      .catch((err: any) => {\n        return Promise.reject(new Error(`failed to refresh access token: ${err}`));\n      });\n  };\n\n  validateOpenidConfig = () => {\n    if (this.openidConfig.scopes.length > 0) {\n      return;\n    }\n    if (this.openidConfig.provider.token_endpoint.includes('https://login.microsoftonline.com')) {\n      this.openidConfig.scopes.push(this.openidConfig.clientId + '/.default');\n    }\n  };\n\n  requestAccessToken = () => {\n    const url = this.openidConfig.provider.token_endpoint;\n    const params = new URLSearchParams({\n      grant_type: 'client_credentials',\n      client_id: this.openidConfig.clientId,\n      client_secret: this.creds.clientSecret,\n      scope: this.openidConfig.scopes.join(' '),\n    });\n\n    const contentType = 'application/x-www-form-urlencoded;charset=UTF-8';\n    return this.http.externalPost(url, params, contentType);\n  };\n}\n\nexport class ApiKey {\n  public readonly apiKey: string;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n  }\n}\n\nfunction calcExpirationEpoch(expiresIn: number): number {\n  return Date.now() + (expiresIn - 2) * 1000; // -2 for some lag\n}\n\nfunction parseSilentRefresh(silentRefresh: boolean | undefined): boolean {\n  // Silent token refresh by default\n  if (silentRefresh === undefined) {\n    return true;\n  } else {\n    return silentRefresh;\n  }\n}\n", "import { HttpClient } from '../connection/httpClient';\n\nexport default class OpenidConfigurationGetterGetter {\n  private client: HttpClient;\n  constructor(client: HttpClient) {\n    this.client = client;\n  }\n\n  do = () => {\n    return this.client\n      .getRaw('/.well-known/openid-configuration')\n      .then((res: { status: number; json: () => any }) => {\n        if (res.status < 400) {\n          return res.json();\n        }\n\n        if (res.status == 404) {\n          // OIDC is not configured\n          return Promise.resolve(undefined);\n        }\n\n        return Promise.reject(new Error(`unexpected status code: ${res.status}`));\n      });\n  };\n}\n", "import fetch from 'isomorphic-fetch';\nimport { ConnectionParams } from '..';\n\nexport interface HttpClient {\n  patch: (path: string, payload: any, bearerToken?: string) => any;\n  head: (path: string, payload: any, bearerToken?: string) => any;\n  post: (path: string, payload: any, expectReturnContent?: boolean, bearerToken?: string) => any;\n  get: (path: string, expectReturnContent?: boolean, bearerToken?: string) => any;\n  externalPost: (externalUrl: string, body: any, contentType: any) => any;\n  getRaw: (path: string, bearerToken?: string) => any;\n  delete: (path: string, payload: any, expectReturnContent?: boolean, bearerToken?: string) => any;\n  put: (path: string, payload: any, expectReturnContent?: boolean, bearerToken?: string) => any;\n  externalGet: (externalUrl: string) => Promise<any>;\n}\n\nexport const httpClient = (config: ConnectionParams): HttpClient => {\n  const baseUri = `${config.scheme}://${config.host}/v1`;\n  const url = makeUrl(baseUri);\n\n  return {\n    post: (path: string, payload: any, expectReturnContent = true, bearerToken = '') => {\n      const request = {\n        method: 'POST',\n        headers: {\n          ...config.headers,\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      };\n      addAuthHeaderIfNeeded(request, bearerToken);\n      return fetch(url(path), request).then(makeCheckStatus(expectReturnContent));\n    },\n    put: (path: string, payload: any, expectReturnContent = true, bearerToken = '') => {\n      const request = {\n        method: 'PUT',\n        headers: {\n          ...config.headers,\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      };\n      addAuthHeaderIfNeeded(request, bearerToken);\n      return fetch(url(path), request).then(makeCheckStatus(expectReturnContent));\n    },\n    patch: (path: string, payload: any, bearerToken = '') => {\n      const request = {\n        method: 'PATCH',\n        headers: {\n          ...config.headers,\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      };\n      addAuthHeaderIfNeeded(request, bearerToken);\n      return fetch(url(path), request).then(makeCheckStatus(false));\n    },\n    delete: (path: string, payload: any, expectReturnContent = false, bearerToken = '') => {\n      const request = {\n        method: 'DELETE',\n        headers: {\n          ...config.headers,\n          'content-type': 'application/json',\n        },\n        body: payload ? JSON.stringify(payload) : undefined,\n      };\n      addAuthHeaderIfNeeded(request, bearerToken);\n      return fetch(url(path), request).then(makeCheckStatus(expectReturnContent));\n    },\n    head: (path: string, payload: any, bearerToken = '') => {\n      const request = {\n        method: 'HEAD',\n        headers: {\n          ...config.headers,\n          'content-type': 'application/json',\n        },\n        body: payload ? JSON.stringify(payload) : undefined,\n      };\n      addAuthHeaderIfNeeded(request, bearerToken);\n      return fetch(url(path), request).then(handleHeadResponse(false));\n    },\n    get: (path: string, expectReturnContent = true, bearerToken = '') => {\n      const request = {\n        method: 'GET',\n        headers: {\n          ...config.headers,\n        },\n      };\n      addAuthHeaderIfNeeded(request, bearerToken);\n      return fetch(url(path), request).then(makeCheckStatus(expectReturnContent));\n    },\n    getRaw: (path: string, bearerToken = '') => {\n      // getRaw does not handle the status leaving this to the caller\n      const request = {\n        method: 'GET',\n        headers: {\n          ...config.headers,\n        },\n      };\n      addAuthHeaderIfNeeded(request, bearerToken);\n      return fetch(url(path), request);\n    },\n    externalGet: (externalUrl: string) => {\n      return fetch(externalUrl, {\n        method: 'GET',\n        headers: {\n          ...config.headers,\n        },\n      }).then(makeCheckStatus(true));\n    },\n    externalPost: (externalUrl: string, body: any, contentType: any) => {\n      if (contentType == undefined || contentType == '') {\n        contentType = 'application/json';\n      }\n      const request = {\n        body: undefined,\n        method: 'POST',\n        headers: {\n          ...config.headers,\n          'content-type': contentType,\n        },\n      };\n      if (body != null) {\n        request.body = body;\n      }\n      return fetch(externalUrl, request).then(makeCheckStatus(true));\n    },\n  };\n};\n\nconst makeUrl = (basePath: string) => (path: string) => basePath + path;\n\nconst makeCheckStatus = (expectResponseBody: any) => (res: any) => {\n  if (res.status >= 400) {\n    return res.text().then((errText: any) => {\n      let err;\n      try {\n        // in case of invalid json response (like empty string)\n        err = JSON.stringify(JSON.parse(errText));\n      } catch (e) {\n        err = errText;\n      }\n      return Promise.reject(new Error(`usage error (${res.status}): ${err}`));\n    });\n  }\n\n  if (expectResponseBody) {\n    return res.json();\n  }\n};\n\nconst handleHeadResponse = (expectResponseBody: any) => (res: any) => {\n  if (res.status == 204 || res.status == 404) {\n    return res.status == 204;\n  }\n  return makeCheckStatus(expectResponseBody);\n};\n\nfunction addAuthHeaderIfNeeded(request: any, bearerToken: string) {\n  if (bearerToken !== '') {\n    request.headers.Authorization = `Bearer ${bearerToken}`;\n  }\n}\n\nexport default httpClient;\n", "import { GraphQLClient as Client, Variables } from 'graphql-request';\nimport { ConnectionParams } from '..';\n\nexport type TQuery = any;\nexport interface GraphQLClient {\n  query: (query: TQuery, variables?: Variables, headers?: HeadersInit) => Promise<{ data: any }>;\n}\n\nexport const gqlClient = (config: ConnectionParams): GraphQLClient => {\n  const scheme = config.scheme;\n  const host = config.host;\n  const defaultHeaders = config.headers;\n  return {\n    // for backward compatibility with replaced graphql-client lib,\n    // results are wrapped into { data: data }\n    query: (query: TQuery, variables?: Variables, headers?: HeadersInit) => {\n      return new Client(`${scheme}://${host}/v1/graphql`, {\n        headers: {\n          ...defaultHeaders,\n          ...headers,\n        },\n      })\n        .request(query, variables, headers)\n        .then((data) => ({ data }));\n    },\n  };\n};\n\nexport default gqlClient;\n", "import { OidcAuthenticator } from './auth';\nimport OpenidConfigurationGetter from '../misc/openidConfigurationGetter';\n\nimport httpClient, { HttpClient } from './httpClient';\nimport gqlClient, { GraphQLClient } from './gqlClient';\nimport { ConnectionParams } from '..';\nimport { Variables } from 'graphql-request';\n\nexport default class Connection {\n  private apiKey?: string;\n  private authEnabled: boolean;\n  private gql: GraphQLClient;\n  public readonly http: HttpClient;\n  public oidcAuth?: OidcAuthenticator;\n\n  constructor(params: ConnectionParams) {\n    params = this.sanitizeParams(params);\n    this.http = httpClient(params);\n    this.gql = gqlClient(params);\n    this.authEnabled = this.parseAuthParams(params);\n  }\n\n  private parseAuthParams(params: ConnectionParams): boolean {\n    if (params.authClientSecret && params.apiKey) {\n      throw new Error('must provide one of authClientSecret (OIDC) or apiKey, cannot provide both');\n    }\n    if (params.authClientSecret) {\n      this.oidcAuth = new OidcAuthenticator(this.http, params.authClientSecret);\n      return true;\n    }\n    if (params.apiKey) {\n      this.apiKey = params.apiKey?.apiKey;\n      return true;\n    }\n    return false;\n  }\n\n  private sanitizeParams(params: ConnectionParams) {\n    while (params.host.endsWith('/')) {\n      params.host = params.host.slice(0, -1);\n    }\n\n    return params;\n  }\n\n  post = (path: string, payload: any, expectReturnContent = true) => {\n    if (this.authEnabled) {\n      return this.login().then((token) => this.http.post(path, payload, expectReturnContent, token));\n    }\n    return this.http.post(path, payload, expectReturnContent);\n  };\n\n  put = (path: string, payload: any, expectReturnContent = true) => {\n    if (this.authEnabled) {\n      return this.login().then((token) => this.http.put(path, payload, expectReturnContent, token));\n    }\n    return this.http.put(path, payload, expectReturnContent);\n  };\n\n  patch = (path: string, payload: any) => {\n    if (this.authEnabled) {\n      return this.login().then((token) => this.http.patch(path, payload, token));\n    }\n    return this.http.patch(path, payload);\n  };\n\n  delete = (path: string, payload: any, expectReturnContent = false) => {\n    if (this.authEnabled) {\n      return this.login().then((token) => this.http.delete(path, payload, expectReturnContent, token));\n    }\n    return this.http.delete(path, payload, expectReturnContent);\n  };\n\n  head = (path: string, payload: any) => {\n    if (this.authEnabled) {\n      return this.login().then((token) => this.http.head(path, payload, token));\n    }\n    return this.http.head(path, payload);\n  };\n\n  get = (path: string, expectReturnContent = true) => {\n    if (this.authEnabled) {\n      return this.login().then((token) => this.http.get(path, expectReturnContent, token));\n    }\n    return this.http.get(path, expectReturnContent);\n  };\n\n  query = (query: any, variables?: Variables) => {\n    if (this.authEnabled) {\n      return this.login().then((token) => {\n        const headers = { Authorization: `Bearer ${token}` };\n        return this.gql.query(query, variables, headers);\n      });\n    }\n    return this.gql.query(query, variables);\n  };\n\n  login = async () => {\n    if (this.apiKey) {\n      return this.apiKey;\n    }\n\n    if (!this.oidcAuth) {\n      return '';\n    }\n\n    const localConfig = await new OpenidConfigurationGetter(this.http).do();\n\n    if (localConfig === undefined) {\n      console.warn('client is configured for authentication, but server is not');\n      return '';\n    }\n\n    if (Date.now() >= this.oidcAuth.getExpiresAt()) {\n      await this.oidcAuth.refresh(localConfig);\n    }\n    return this.oidcAuth.getAccessToken();\n  };\n}\n\nexport * from './auth';\n", "import { WhereFilter } from '../openapi/types';\n\nexport default class GraphQLWhere {\n  private operands?: string;\n  private operator?: string;\n  private path?: string[];\n  private readonly source: any;\n  private valueContent: any;\n  private valueType?: string;\n\n  constructor(whereObj: WhereFilter) {\n    this.source = whereObj;\n  }\n\n  toString() {\n    this.parse();\n    this.validate();\n    if (this.operands) {\n      return `{operator:${this.operator},operands:[${this.operands}]}`;\n    } else {\n      // this is an on-value filter\n\n      const valueContent = this.marshalValueContent();\n      return (\n        `{` +\n        `operator:${this.operator},` +\n        `${this.valueType}:${valueContent},` +\n        `path:${JSON.stringify(this.path)}` +\n        `}`\n      );\n    }\n  }\n\n  marshalValueContent() {\n    if (this.valueType == 'valueGeoRange') {\n      return this.marshalValueGeoRange();\n    }\n\n    return JSON.stringify(this.valueContent);\n  }\n\n  marshalValueGeoRange() {\n    let parts: any[] = [];\n\n    const gc = this.valueContent.geoCoordinates;\n    if (gc) {\n      let gcParts: any[] = [];\n\n      if (gc.latitude) {\n        gcParts = [...gcParts, `latitude:${gc.latitude}`];\n      }\n\n      if (gc.longitude) {\n        gcParts = [...gcParts, `longitude:${gc.longitude}`];\n      }\n      parts = [...parts, `geoCoordinates:{${gcParts.join(',')}}`];\n    }\n\n    const d = this.valueContent.distance;\n    if (d) {\n      let dParts: any[] = [];\n      if (d.max) {\n        dParts = [...dParts, `max:${d.max}`];\n      }\n\n      parts = [...parts, `distance:{${dParts.join(',')}}`];\n    }\n\n    return `{${parts.join(',')}}`;\n  }\n\n  validate() {\n    if (!this.operator) {\n      throw new Error('where filter: operator cannot be empty');\n    }\n\n    if (!this.operands) {\n      if (!this.valueType) {\n        throw new Error('where filter: value<Type> cannot be empty');\n      }\n\n      if (!this.path) {\n        throw new Error('where filter: path cannot be empty');\n      }\n    }\n  }\n\n  parse() {\n    for (const key in this.source) {\n      switch (key) {\n        case 'operator':\n          this.parseOperator(this.source[key]);\n          break;\n        case 'operands':\n          this.parseOperands(this.source[key]);\n          break;\n        case 'path':\n          this.parsePath(this.source[key]);\n          break;\n        default:\n          if (key.indexOf('value') != 0) {\n            throw new Error(\"where filter: unrecognized key '\" + key + \"'\");\n          }\n          this.parseValue(key, this.source[key]);\n      }\n    }\n  }\n\n  parseOperator(op: string) {\n    if (typeof op !== 'string') {\n      throw new Error('where filter: operator must be a string');\n    }\n\n    this.operator = op;\n  }\n\n  parsePath(path: string[]) {\n    if (!Array.isArray(path)) {\n      throw new Error('where filter: path must be an array');\n    }\n\n    this.path = path;\n  }\n\n  parseValue(key: string, value: any) {\n    switch (key) {\n      case 'valueString':\n      case 'valueText':\n      case 'valueInt':\n      case 'valueNumber':\n      case 'valueDate':\n      case 'valueBoolean':\n      case 'valueGeoRange':\n        break;\n      default:\n        throw new Error(\"where filter: unrecognized value prop '\" + key + \"'\");\n    }\n    this.valueType = key;\n    this.valueContent = value;\n  }\n\n  parseOperands(ops: any[]) {\n    if (!Array.isArray(ops)) {\n      throw new Error('where filter: operands must be an array');\n    }\n\n    this.operands = ops\n      .map((element) => {\n        return new GraphQLWhere(element).toString();\n      })\n      .join(',');\n  }\n}\n", "export interface NearTextArgs {\n  autocorrect?: boolean;\n  certainty?: number;\n  concepts: string[];\n  distance?: number;\n  moveAwayFrom?: Move;\n  moveTo?: Move;\n}\n\nexport interface Move {\n  objects?: MoveObject[];\n  concepts?: string[];\n  force?: number;\n}\n\nexport interface MoveObject {\n  beacon?: string;\n  id?: string;\n}\n\nexport default class GraphQLNearText {\n  private autocorrect?: boolean;\n  private certainty?: number;\n  private concepts: string[];\n  private distance?: number;\n  private moveAwayFrom?: any;\n  private moveTo?: any;\n\n  constructor(args: NearTextArgs) {\n    this.autocorrect = args.autocorrect;\n    this.certainty = args.certainty;\n    this.concepts = args.concepts;\n    this.distance = args.distance;\n    this.moveAwayFrom = args.moveAwayFrom;\n    this.moveTo = args.moveTo;\n  }\n\n  toString(): string {\n    this.validate();\n\n    let args = [`concepts:${JSON.stringify(this.concepts)}`];\n\n    if (this.certainty) {\n      args = [...args, `certainty:${this.certainty}`];\n    }\n\n    if (this.distance) {\n      args = [...args, `distance:${this.distance}`];\n    }\n\n    if (this.moveTo) {\n      let moveToArgs: string[] = [];\n      if (this.moveTo.concepts) {\n        moveToArgs = [...moveToArgs, `concepts:${JSON.stringify(this.moveTo.concepts)}`];\n      }\n      if (this.moveTo.objects) {\n        moveToArgs = [...moveToArgs, `objects:${this.parseMoveObjects('moveTo', this.moveTo.objects)}`];\n      }\n      if (this.moveTo.force) {\n        moveToArgs = [...moveToArgs, `force:${this.moveTo.force}`];\n      }\n      args = [...args, `moveTo:{${moveToArgs.join(',')}}`];\n    }\n\n    if (this.moveAwayFrom) {\n      let moveAwayFromArgs: string[] = [];\n      if (this.moveAwayFrom.concepts) {\n        moveAwayFromArgs = [...moveAwayFromArgs, `concepts:${JSON.stringify(this.moveAwayFrom.concepts)}`];\n      }\n      if (this.moveAwayFrom.objects) {\n        moveAwayFromArgs = [\n          ...moveAwayFromArgs,\n          `objects:${this.parseMoveObjects('moveAwayFrom', this.moveAwayFrom.objects)}`,\n        ];\n      }\n      if (this.moveAwayFrom.force) {\n        moveAwayFromArgs = [...moveAwayFromArgs, `force:${this.moveAwayFrom.force}`];\n      }\n      args = [...args, `moveAwayFrom:{${moveAwayFromArgs.join(',')}}`];\n    }\n\n    if (this.autocorrect !== undefined) {\n      args = [...args, `autocorrect:${this.autocorrect}`];\n    }\n\n    return `{${args.join(',')}}`;\n  }\n\n  validate() {\n    if (this.moveTo) {\n      if (!this.moveTo.concepts && !this.moveTo.objects) {\n        throw new Error('nearText filter: moveTo.concepts or moveTo.objects must be present');\n      }\n      if (!this.moveTo.force || (!this.moveTo.concepts && !this.moveTo.objects)) {\n        throw new Error(\"nearText filter: moveTo must have fields 'concepts' or 'objects' and 'force'\");\n      }\n    }\n\n    if (this.moveAwayFrom) {\n      if (!this.moveAwayFrom.concepts && !this.moveAwayFrom.objects) {\n        throw new Error('nearText filter: moveAwayFrom.concepts or moveAwayFrom.objects must be present');\n      }\n      if (!this.moveAwayFrom.force || (!this.moveAwayFrom.concepts && !this.moveAwayFrom.objects)) {\n        throw new Error(\"nearText filter: moveAwayFrom must have fields 'concepts' or 'objects' and 'force'\");\n      }\n    }\n  }\n\n  parseMoveObjects(move: MoveType, objects: MoveObject[]): string {\n    const moveObjects: string[] = [];\n    for (const i in objects) {\n      if (!objects[i].id && !objects[i].beacon) {\n        throw new Error(`nearText: ${move}.objects[${i}].id or ${move}.objects[${i}].beacon must be present`);\n      }\n      const objs = [];\n      if (objects[i].id) {\n        objs.push(`id:\"${objects[i].id}\"`);\n      }\n      if (objects[i].beacon) {\n        objs.push(`beacon:\"${objects[i].beacon}\"`);\n      }\n      moveObjects.push(`{${objs.join(',')}}`);\n    }\n    return `[${moveObjects.join(',')}]`;\n  }\n}\n\ntype MoveType = 'moveTo' | 'moveAwayFrom';\n", "export interface NearVectorArgs {\n  certainty?: number;\n  distance?: number;\n  vector: number[];\n}\n\nexport default class GraphQLNearVector {\n  private certainty?: number;\n  private distance?: number;\n  private vector: number[];\n\n  constructor(args: NearVectorArgs) {\n    this.certainty = args.certainty;\n    this.distance = args.distance;\n    this.vector = args.vector;\n  }\n\n  toString(wrap = true) {\n    let args = [`vector:${JSON.stringify(this.vector)}`]; // vector must always be set\n\n    if (this.certainty) {\n      args = [...args, `certainty:${this.certainty}`];\n    }\n\n    if (this.distance) {\n      args = [...args, `distance:${this.distance}`];\n    }\n\n    if (!wrap) {\n      return `${args.join(',')}`;\n    }\n    return `{${args.join(',')}}`;\n  }\n}\n", "export interface NearObjectArgs {\n  beacon?: string;\n  certainty?: number;\n  distance?: number;\n  id?: string;\n}\n\nexport default class GraphQLNearObject {\n  private beacon?: string;\n  private certainty?: number;\n  private distance?: number;\n  private id?: string;\n\n  constructor(args: NearObjectArgs) {\n    this.beacon = args.beacon;\n    this.certainty = args.certainty;\n    this.distance = args.distance;\n    this.id = args.id;\n  }\n\n  toString(wrap = true) {\n    this.validate();\n\n    let args: any[] = [];\n\n    if (this.id) {\n      args = [...args, `id:${JSON.stringify(this.id)}`];\n    }\n\n    if (this.beacon) {\n      args = [...args, `beacon:${JSON.stringify(this.beacon)}`];\n    }\n\n    if (this.certainty) {\n      args = [...args, `certainty:${this.certainty}`];\n    }\n\n    if (this.distance) {\n      args = [...args, `distance:${this.distance}`];\n    }\n\n    if (!wrap) {\n      return `${args.join(',')}`;\n    }\n    return `{${args.join(',')}}`;\n  }\n\n  validate() {\n    if (!this.id && !this.beacon) {\n      throw new Error('nearObject filter: id or beacon needs to be set');\n    }\n  }\n}\n", "export function isValidIntProperty(input: any) {\n  return Number.isInteger(input);\n}\n\nexport function isValidPositiveIntProperty(input: any) {\n  return isValidIntProperty(input) && input >= 0;\n}\n\nexport function isValidNumber(input: any) {\n  return typeof input == 'number';\n}\n\nexport function isValidNumberArray(input: any) {\n  if (Array.isArray(input)) {\n    for (const i in input) {\n      if (!isValidNumber(input[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n", "import Connection from '../connection';\n\nexport interface ICommandBase {\n  /**\n   * The client's connection\n   */\n  client: Connection;\n  /**\n   * An array of validation errors\n   */\n  errors: string[];\n  /**\n   * Execute the command\n   */\n  do: () => Promise<any>;\n  /**\n   * Optional method to build the payload of an actual call\n   */\n  payload?: () => any;\n  /**\n   * validate that all the required parameters were feed to the builder\n   */\n  validate: () => void;\n}\n\nexport abstract class CommandBase implements ICommandBase {\n  private _errors: string[];\n  public readonly client: Connection;\n\n  protected constructor(client: Connection) {\n    this.client = client;\n    this._errors = [];\n  }\n\n  public get errors(): string[] {\n    return this._errors;\n  }\n\n  addError(error: string) {\n    this._errors = [...this.errors, error];\n  }\n\n  addErrors(errors: string[]) {\n    this._errors = [...this.errors, ...errors];\n  }\n\n  abstract do(): Promise<any>;\n\n  abstract validate(): void;\n}\n", "import Where from './where';\nimport NearText, { NearTextArgs } from './nearText';\nimport NearVector, { NearVectorArgs } from './nearVector';\nimport NearObject, { NearObjectArgs } from './nearObject';\nimport { isValidPositiveIntProperty } from '../validation/number';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { WhereFilter } from '../openapi/types';\n\nexport default class Aggregator extends CommandBase {\n  private className?: string;\n  private fields?: string;\n  private groupBy?: string[];\n  private includesNearMediaFilter: boolean;\n  private limit?: number;\n  private nearObjectString?: string;\n  private nearTextString?: string;\n  private nearVectorString?: string;\n  private objectLimit?: number;\n  private whereString?: string;\n\n  constructor(client: Connection) {\n    super(client);\n    this.includesNearMediaFilter = false;\n  }\n\n  withFields = (fields: string) => {\n    this.fields = fields;\n    return this;\n  };\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  withWhere = (where: WhereFilter) => {\n    try {\n      this.whereString = new Where(where).toString();\n    } catch (e: any) {\n      this.addError(e as string);\n    }\n    return this;\n  };\n\n  withNearText = (args: NearTextArgs) => {\n    if (this.includesNearMediaFilter) {\n      throw new Error('cannot use multiple near<Media> filters in a single query');\n    }\n\n    try {\n      this.nearTextString = new NearText(args).toString();\n      this.includesNearMediaFilter = true;\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n\n    return this;\n  };\n\n  withNearObject = (args: NearObjectArgs) => {\n    if (this.includesNearMediaFilter) {\n      throw new Error('cannot use multiple near<Media> filters in a single query');\n    }\n\n    try {\n      this.nearObjectString = new NearObject(args).toString();\n      this.includesNearMediaFilter = true;\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n\n    return this;\n  };\n\n  withNearVector = (args: NearVectorArgs) => {\n    if (this.includesNearMediaFilter) {\n      throw new Error('cannot use multiple near<Media> filters in a single query');\n    }\n\n    try {\n      this.nearVectorString = new NearVector(args).toString();\n      this.includesNearMediaFilter = true;\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n\n    return this;\n  };\n\n  withObjectLimit = (objectLimit: number) => {\n    if (!isValidPositiveIntProperty(objectLimit)) {\n      throw new Error('objectLimit must be a non-negative integer');\n    }\n\n    this.objectLimit = objectLimit;\n    return this;\n  };\n\n  withLimit = (limit: number) => {\n    this.limit = limit;\n    return this;\n  };\n\n  withGroupBy = (groupBy: string[]) => {\n    this.groupBy = groupBy;\n    return this;\n  };\n\n  validateGroup = () => {\n    if (!this.groupBy) {\n      // nothing to check if this optional parameter is not set\n      return;\n    }\n\n    if (!Array.isArray(this.groupBy)) {\n      throw new Error('groupBy must be an array');\n    }\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validate = () => {\n    this.validateGroup();\n    this.validateIsSet(this.className, 'className', '.withClassName(className)');\n    this.validateIsSet(this.fields, 'fields', '.withFields(fields)');\n  };\n\n  do = () => {\n    let params = '';\n\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    if (\n      this.whereString ||\n      this.nearTextString ||\n      this.nearObjectString ||\n      this.nearVectorString ||\n      this.limit ||\n      this.groupBy\n    ) {\n      let args: string[] = [];\n\n      if (this.whereString) {\n        args = [...args, `where:${this.whereString}`];\n      }\n\n      if (this.nearTextString) {\n        args = [...args, `nearText:${this.nearTextString}`];\n      }\n\n      if (this.nearObjectString) {\n        args = [...args, `nearObject:${this.nearObjectString}`];\n      }\n\n      if (this.nearVectorString) {\n        args = [...args, `nearVector:${this.nearVectorString}`];\n      }\n\n      if (this.groupBy) {\n        args = [...args, `groupBy:${JSON.stringify(this.groupBy)}`];\n      }\n\n      if (this.limit) {\n        args = [...args, `limit:${this.limit}`];\n      }\n\n      if (this.objectLimit) {\n        args = [...args, `objectLimit:${this.objectLimit}`];\n      }\n\n      params = `(${args.join(',')})`;\n    }\n\n    return this.client.query(`{Aggregate{${this.className}${params}{${this.fields}}}}`);\n  };\n}\n", "import { isValidStringArray, isValidStringProperty } from '../validation/string';\n\nexport interface Bm25Args {\n  properties?: string[];\n  query: string;\n}\n\nexport default class GraphQLBm25 {\n  private properties?: string[];\n  private query: string;\n\n  constructor(args: Bm25Args) {\n    this.properties = args.properties;\n    this.query = args.query;\n  }\n\n  toString() {\n    let args = [`query:${JSON.stringify(this.query)}`]; // query must always be set\n\n    if (this.properties !== undefined) {\n      args = [...args, `properties:${JSON.stringify(this.properties)}`];\n    }\n\n    return `{${args.join(',')}}`;\n  }\n}\n", "export interface HybridArgs {\n  alpha?: number;\n  query: string;\n  vector?: number[];\n}\n\nexport default class GraphQLHybrid {\n  private alpha?: number;\n  private query: string;\n  private vector?: number[];\n\n  constructor(args: HybridArgs) {\n    this.alpha = args.alpha;\n    this.query = args.query;\n    this.vector = args.vector;\n  }\n\n  toString() {\n    let args = [`query:${JSON.stringify(this.query)}`]; // query must always be set\n\n    if (this.alpha !== undefined) {\n      args = [...args, `alpha:${JSON.stringify(this.alpha)}`];\n    }\n\n    if (this.vector !== undefined) {\n      args = [...args, `vector:${JSON.stringify(this.vector)}`];\n    }\n\n    return `{${args.join(',')}}`;\n  }\n}\n", "export interface NearImageArgs {\n  certainty?: number;\n  distance?: number;\n  image?: string;\n}\n\nexport default class GraphQLNearImage {\n  private certainty?: number;\n  private distance?: number;\n  private image?: string;\n\n  constructor(args: NearImageArgs) {\n    this.certainty = args.certainty;\n    this.distance = args.distance;\n    this.image = args.image;\n  }\n\n  toString(wrap = true) {\n    this.validate();\n\n    let args: string[] = [];\n\n    if (this.image) {\n      let img = this.image;\n      if (img.startsWith('data:')) {\n        const base64part = ';base64,';\n        img = img.substring(img.indexOf(base64part) + base64part.length);\n      }\n      args = [...args, `image:${JSON.stringify(img)}`];\n    }\n\n    if (this.certainty) {\n      args = [...args, `certainty:${this.certainty}`];\n    }\n\n    if (this.distance) {\n      args = [...args, `distance:${this.distance}`];\n    }\n\n    if (!wrap) {\n      return `${args.join(',')}`;\n    }\n    return `{${args.join(',')}}`;\n  }\n\n  validate() {\n    if (!this.image) {\n      throw new Error('nearImage filter: image field must be present');\n    }\n  }\n}\n", "export interface AskArgs {\n  autocorrect?: boolean;\n  certainty?: number;\n  distance?: number;\n  properties?: string[];\n  question?: string;\n  rerank?: boolean;\n}\n\nexport default class GraphQLAsk {\n  private autocorrect?: boolean;\n  private certainty?: number;\n  private distance?: number;\n  private properties?: string[];\n  private question?: string;\n  private rerank?: boolean;\n\n  constructor(args: AskArgs) {\n    this.autocorrect = args.autocorrect;\n    this.certainty = args.certainty;\n    this.distance = args.distance;\n    this.properties = args.properties;\n    this.question = args.question;\n    this.rerank = args.rerank;\n  }\n\n  toString(wrap = true) {\n    this.validate();\n\n    let args: any[] = [];\n\n    if (this.question) {\n      args = [...args, `question:${JSON.stringify(this.question)}`];\n    }\n\n    if (this.properties) {\n      args = [...args, `properties:${JSON.stringify(this.properties)}`];\n    }\n\n    if (this.certainty) {\n      args = [...args, `certainty:${this.certainty}`];\n    }\n\n    if (this.distance) {\n      args = [...args, `distance:${this.distance}`];\n    }\n\n    if (this.autocorrect !== undefined) {\n      args = [...args, `autocorrect:${this.autocorrect}`];\n    }\n\n    if (this.rerank !== undefined) {\n      args = [...args, `rerank:${this.rerank}`];\n    }\n\n    if (!wrap) {\n      return `${args.join(',')}`;\n    }\n    return `{${args.join(',')}}`;\n  }\n\n  validate() {\n    if (!this.question) {\n      throw new Error('ask filter: question needs to be set');\n    }\n  }\n}\n", "export interface GroupArgs {\n  type: string;\n  force: number;\n}\n\nexport default class GraphQLGroup {\n  private args: GroupArgs;\n\n  constructor(args: GroupArgs) {\n    this.args = args;\n  }\n\n  toString() {\n    let parts: any[] = [];\n\n    if (this.args.type) {\n      // value is a graphQL enum, so doesn't need to be quoted\n      parts = [...parts, `type:${this.args.type}`];\n    }\n\n    if (this.args.force) {\n      parts = [...parts, `force:${this.args.force}`];\n    }\n\n    return `{${parts.join(',')}}`;\n  }\n}\n", "export interface SortArgs {\n  path: string[];\n  order?: string;\n}\n\nexport type SortOrder = 'asc' | 'desc';\n\nexport default class GraphQLSort {\n  private args: SortArgs[];\n\n  constructor(args: SortArgs[]) {\n    this.args = args;\n  }\n\n  toString(): string {\n    const parts: string[] = [];\n\n    for (const arg of this.args) {\n      let part = `{path:${JSON.stringify(arg.path)}`;\n      if (arg.order) {\n        part = part.concat(`,order:${arg.order}}`);\n      } else {\n        part = part.concat('}');\n      }\n      parts.push(part);\n    }\n\n    return parts.join(',');\n  }\n}\n", "export interface GenerateArgs {\n  groupedTask?: string;\n  singlePrompt?: string;\n}\n\nexport interface GenerateParts {\n  singleResult?: string;\n  groupedResult?: string;\n  results: string[];\n}\n\nexport class GraphQLGenerate {\n  private groupedTask?: string;\n  private singlePrompt?: string;\n\n  constructor(args: GenerateArgs) {\n    this.groupedTask = args.groupedTask;\n    this.singlePrompt = args.singlePrompt;\n  }\n\n  toString(): string {\n    this.validate();\n\n    let str = 'generate(';\n    const results = ['error'];\n    if (this.singlePrompt) {\n      str += `singleResult:{prompt:\"${this.singlePrompt.replace(/[\\n\\r]+/g, '')}\"}`;\n      results.push('singleResult');\n    }\n    if (this.groupedTask) {\n      str += `groupedResult:{task:\"${this.groupedTask.replace(/[\\n\\r]+/g, '')}\"}`;\n      results.push('groupedResult');\n    }\n    str += `){${results.join(' ')}}`;\n    return str;\n  }\n\n  private validate() {\n    if (!this.groupedTask && !this.singlePrompt) {\n      throw new Error('must provide at least one of `singlePrompt` or `groupTask`');\n    }\n    if (this.groupedTask !== undefined && this.groupedTask == '') {\n      throw new Error('groupedTask must not be empty');\n    }\n    if (this.singlePrompt !== undefined && this.singlePrompt == '') {\n      throw new Error('singlePrompt must not be empty');\n    }\n  }\n}\n", "import Where from './where';\nimport NearText, { NearTextArgs } from './nearText';\nimport NearVector, { NearVectorArgs } from './nearVector';\nimport Bm25, { Bm25Args } from './bm25';\nimport Hybrid, { HybridArgs } from './hybrid';\nimport NearObject, { NearObjectArgs } from './nearObject';\nimport NearImage, { NearImageArgs } from './nearImage';\nimport Ask, { AskArgs } from './ask';\nimport Group, { GroupArgs } from './group';\nimport Sort, { SortArgs } from './sort';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { WhereFilter } from '../openapi/types';\nimport { GenerateArgs, GraphQLGenerate } from './generate';\n\nexport default class GraphQLGetter extends CommandBase {\n  private after?: string;\n  private askString?: string;\n  private bm25String?: string;\n  private className?: string;\n  private fields?: string;\n  private groupString?: string;\n  private hybridString?: string;\n  private includesNearMediaFilter: boolean;\n  private limit?: number;\n  private nearImageString?: string;\n  private nearObjectString?: string;\n  private nearTextString?: string;\n  private nearVectorString?: string;\n  private offset?: number;\n  private sortString?: string;\n  private whereString?: string;\n  private generateString?: string;\n\n  constructor(client: Connection) {\n    super(client);\n    this.includesNearMediaFilter = false;\n  }\n\n  withFields = (fields: string) => {\n    this.fields = fields;\n    return this;\n  };\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  withAfter = (id: string) => {\n    this.after = id;\n    return this;\n  };\n\n  withGroup = (args: GroupArgs) => {\n    try {\n      this.groupString = new Group(args).toString();\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n\n    return this;\n  };\n\n  withWhere = (whereObj: WhereFilter) => {\n    try {\n      this.whereString = new Where(whereObj).toString();\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n    return this;\n  };\n\n  withNearText = (args: NearTextArgs) => {\n    if (this.includesNearMediaFilter) {\n      throw new Error('cannot use multiple near<Media> filters in a single query');\n    }\n\n    this.nearTextString = new NearText(args).toString();\n    this.includesNearMediaFilter = true;\n\n    return this;\n  };\n\n  withBm25 = (args: Bm25Args) => {\n    try {\n      this.bm25String = new Bm25(args).toString();\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n\n    return this;\n  };\n\n  withHybrid = (args: HybridArgs) => {\n    try {\n      this.hybridString = new Hybrid(args).toString();\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n\n    return this;\n  };\n\n  withNearObject = (args: NearObjectArgs) => {\n    if (this.includesNearMediaFilter) {\n      throw new Error('cannot use multiple near<Media> filters in a single query');\n    }\n\n    try {\n      this.nearObjectString = new NearObject(args).toString();\n      this.includesNearMediaFilter = true;\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n\n    return this;\n  };\n\n  withAsk = (askObj: AskArgs) => {\n    try {\n      this.askString = new Ask(askObj).toString();\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n    return this;\n  };\n\n  withNearImage = (args: NearImageArgs) => {\n    if (this.includesNearMediaFilter) {\n      throw new Error('cannot use multiple near<Media> filters in a single query');\n    }\n\n    try {\n      this.nearImageString = new NearImage(args).toString();\n      this.includesNearMediaFilter = true;\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n\n    return this;\n  };\n\n  withNearVector = (args: NearVectorArgs) => {\n    if (this.includesNearMediaFilter) {\n      throw new Error('cannot use multiple near<Media> filters in a single query');\n    }\n\n    try {\n      this.nearVectorString = new NearVector(args).toString();\n      this.includesNearMediaFilter = true;\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n\n    return this;\n  };\n\n  withLimit = (limit: number) => {\n    this.limit = limit;\n    return this;\n  };\n\n  withOffset = (offset: number) => {\n    this.offset = offset;\n    return this;\n  };\n\n  withSort = (args: SortArgs[]) => {\n    this.sortString = new Sort(args).toString();\n    return this;\n  };\n\n  withGenerate = (args: GenerateArgs) => {\n    this.generateString = new GraphQLGenerate(args).toString();\n    return this;\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validate = () => {\n    this.validateIsSet(this.className, 'className', '.withClassName(className)');\n    this.validateIsSet(this.fields, 'fields', '.withFields(fields)');\n  };\n\n  do = () => {\n    let params = '';\n\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    let args: string[] = [];\n    if (this.whereString) {\n      args = [...args, `where:${this.whereString}`];\n    }\n\n    if (this.nearTextString) {\n      args = [...args, `nearText:${this.nearTextString}`];\n    }\n\n    if (this.nearObjectString) {\n      args = [...args, `nearObject:${this.nearObjectString}`];\n    }\n\n    if (this.askString) {\n      args = [...args, `ask:${this.askString}`];\n    }\n\n    if (this.nearImageString) {\n      args = [...args, `nearImage:${this.nearImageString}`];\n    }\n\n    if (this.nearVectorString) {\n      args = [...args, `nearVector:${this.nearVectorString}`];\n    }\n\n    if (this.bm25String) {\n      args = [...args, `bm25:${this.bm25String}`];\n    }\n\n    if (this.hybridString) {\n      args = [...args, `hybrid:${this.hybridString}`];\n    }\n\n    if (this.groupString) {\n      args = [...args, `group:${this.groupString}`];\n    }\n\n    if (this.limit) {\n      args = [...args, `limit:${this.limit}`];\n    }\n\n    if (this.offset) {\n      args = [...args, `offset:${this.offset}`];\n    }\n\n    if (this.sortString) {\n      args = [...args, `sort:[${this.sortString}]`];\n    }\n\n    if (this.after) {\n      args = [...args, `after:\"${this.after}\"`];\n    }\n\n    if (this.generateString) {\n      if (this.fields?.includes('_additional')) {\n        this.fields.replace('_additional{', `_additional{${this.generateString}`);\n      } else {\n        this.fields = this.fields?.concat(` _additional{${this.generateString}}`);\n      }\n    }\n\n    if (args.length > 0) {\n      params = `(${args.join(',')})`;\n    }\n\n    return this.client.query(`{Get{${this.className}${params}{${this.fields}}}}`);\n  };\n}\n", "import NearText, { NearTextArgs } from './nearText';\nimport NearVector, { NearVectorArgs } from './nearVector';\nimport NearObject, { NearObjectArgs } from './nearObject';\nimport NearImage, { NearImageArgs } from './nearImage';\nimport Ask, { AskArgs } from './ask';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\n\nexport default class Explorer extends CommandBase {\n  private askString?: string;\n  private fields?: string;\n  private group?: string[];\n  private limit?: number;\n  private nearImageString?: string;\n  private nearObjectString?: string;\n  private nearTextString?: string;\n  private nearVectorString?: string;\n  private params: Record<string, any>;\n\n  constructor(client: Connection) {\n    super(client);\n    this.params = {};\n  }\n\n  withFields = (fields: string) => {\n    this.fields = fields;\n    return this;\n  };\n\n  withLimit = (limit: number) => {\n    this.limit = limit;\n    return this;\n  };\n\n  withNearText = (args: NearTextArgs) => {\n    try {\n      this.nearTextString = new NearText(args).toString();\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n    return this;\n  };\n\n  withNearObject = (args: NearObjectArgs) => {\n    try {\n      this.nearObjectString = new NearObject(args).toString();\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n    return this;\n  };\n\n  withAsk = (args: AskArgs) => {\n    try {\n      this.askString = new Ask(args).toString();\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n    return this;\n  };\n\n  withNearImage = (args: NearImageArgs) => {\n    try {\n      this.nearImageString = new NearImage(args).toString();\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n    return this;\n  };\n\n  withNearVector = (args: NearVectorArgs) => {\n    try {\n      this.nearVectorString = new NearVector(args).toString();\n    } catch (e: any) {\n      this.addError(e.toString());\n    }\n    return this;\n  };\n\n  validateGroup = () => {\n    if (!this.group) {\n      // nothing to check if this optional parameter is not set\n      return;\n    }\n\n    if (!Array.isArray(this.group)) {\n      throw new Error('groupBy must be an array');\n    }\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validate = () => {\n    this.validateIsSet(this.fields, 'fields', '.withFields(fields)');\n  };\n\n  do = (): Promise<any> => {\n    let params = '';\n\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    let args: string[] = [];\n\n    if (this.nearTextString) {\n      args = [...args, `nearText:${this.nearTextString}`];\n    }\n\n    if (this.nearObjectString) {\n      args = [...args, `nearObject:${this.nearObjectString}`];\n    }\n\n    if (this.askString) {\n      args = [...args, `ask:${this.askString}`];\n    }\n\n    if (this.nearImageString) {\n      args = [...args, `nearImage:${this.nearImageString}`];\n    }\n\n    if (this.nearVectorString) {\n      args = [...args, `nearVector:${this.nearVectorString}`];\n    }\n\n    if (this.limit) {\n      args = [...args, `limit:${this.limit}`];\n    }\n\n    params = `(${args.join(',')})`;\n\n    return this.client.query(`{Explore${params}{${this.fields}}}`);\n  };\n}\n", "import Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\n\nexport default class RawGraphQL extends CommandBase {\n  private query?: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withQuery = (query: string) => {\n    this.query = query;\n    return this;\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validate = () => {\n    this.validateIsSet(this.query, 'query', '.raw().withQuery(query)');\n  };\n\n  do = (): Promise<any> => {\n    const params = '';\n\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    if (this.query) {\n      return this.client.query(this.query);\n    }\n\n    return Promise.resolve(undefined);\n  };\n}\n", "import Aggregator from './aggregator';\nimport GraphQLGetter from './getter';\nimport Explorer from './explorer';\nimport Raw from './raw';\nimport Connection from '../connection';\n\nexport interface GraphQL {\n  get: () => GraphQLGetter;\n  aggregate: () => Aggregator;\n  explore: () => Explorer;\n  raw: () => Raw;\n}\n\nconst graphql = (client: Connection): GraphQL => {\n  return {\n    get: () => new GraphQLGetter(client),\n    aggregate: () => new Aggregator(client),\n    explore: () => new Explorer(client),\n    raw: () => new Raw(client),\n  };\n};\n\nexport default graphql;\nexport { default as Aggregator } from './aggregator';\nexport { default as GraphQLGetter } from './getter';\nexport { default as Explorer } from './explorer';\nexport { default as Raw } from './raw';\n", "import Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { WeaviateClass } from '../openapi/types';\n\nexport default class ClassCreator extends CommandBase {\n  private class!: WeaviateClass;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withClass = (classObj: object) => {\n    this.class = classObj;\n    return this;\n  };\n\n  validateClass = () => {\n    if (this.class == undefined || this.class == null) {\n      this.addError('class object must be set - set with .withClass(class)');\n    }\n  };\n\n  validate() {\n    this.validateClass();\n  }\n\n  do = (): Promise<WeaviateClass> => {\n    this.validateClass();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    const path = `/schema`;\n    return this.client.post(path, this.class);\n  };\n}\n", "export function isValidStringProperty(input: any) {\n  return typeof input == 'string' && input.length > 0;\n}\n\nexport function isValidStringArray(input: any) {\n  if (Array.isArray(input)) {\n    for (const i in input) {\n      if (!isValidStringProperty(input[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\n\nexport default class ClassDeleter extends CommandBase {\n  private className?: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  validateClassName = () => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('className must be set - set with .withClassName(className)');\n    }\n  };\n\n  validate = () => {\n    this.validateClassName();\n  };\n\n  do = (): Promise<void> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    const path = `/schema/${this.className}`;\n    return this.client.delete(path, undefined, false);\n  };\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { WeaviateClass } from '../openapi/types';\n\nexport default class ClassGetter extends CommandBase {\n  private className?: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  validateClassName = () => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('className must be set - set with .withClassName(className)');\n    }\n  };\n\n  validate = () => {\n    this.validateClassName();\n  };\n\n  do = (): Promise<WeaviateClass> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    const path = `/schema/${this.className}`;\n    return this.client.get(path);\n  };\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { Property } from '../openapi/types';\n\nexport default class PropertyCreator extends CommandBase {\n  private className!: string;\n  private property!: Property;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  withProperty = (property: Property) => {\n    this.property = property;\n    return this;\n  };\n\n  validateClassName = () => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('className must be set - set with .withClassName(className)');\n    }\n  };\n\n  validateProperty = () => {\n    if (this.property == undefined || this.property == null) {\n      this.addError('property must be set - set with .withProperty(property)');\n    }\n  };\n\n  validate = () => {\n    this.validateClassName();\n    this.validateProperty();\n  };\n\n  do = (): Promise<Property> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    const path = `/schema/${this.className}/properties`;\n    return this.client.post(path, this.property);\n  };\n}\n", "import Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { WeaviateSchema } from '../openapi/types';\n\nexport default class SchemaGetter extends CommandBase {\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  validate() {\n    // nothing to validate\n  }\n\n  do = (): Promise<WeaviateSchema> => {\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    const path = `/schema`;\n    return this.client.get(path);\n  };\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { ShardStatusList } from '../openapi/types';\n\nexport default class ShardsGetter extends CommandBase {\n  private className?: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  validateClassName = () => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('className must be set - set with .withClassName(className)');\n    }\n  };\n\n  validate = () => {\n    this.validateClassName();\n  };\n\n  do = (): Promise<ShardStatusList> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error(`invalid usage: ${this.errors.join(', ')}`));\n    }\n\n    return getShards(this.client, this.className);\n  };\n}\n\nexport function getShards(client: Connection, className: any) {\n  const path = `/schema/${className}/shards`;\n  return client.get(path);\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\n\nexport default class ShardUpdater extends CommandBase {\n  private className!: string;\n  private shardName!: string;\n  private status!: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  validateClassName = () => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('className must be set - set with .withClassName(className)');\n    }\n  };\n\n  withShardName = (shardName: string) => {\n    this.shardName = shardName;\n    return this;\n  };\n\n  validateShardName = () => {\n    if (!isValidStringProperty(this.shardName)) {\n      this.addError('shardName must be set - set with .withShardName(shardName)');\n    }\n  };\n\n  withStatus = (status: string) => {\n    this.status = status;\n    return this;\n  };\n\n  validateStatus = () => {\n    if (!isValidStringProperty(this.status)) {\n      this.addError('status must be set - set with .withStatus(status)');\n    }\n  };\n\n  validate = () => {\n    this.validateClassName();\n    this.validateShardName();\n    this.validateStatus();\n  };\n\n  do = () => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error(`invalid usage: ${this.errors.join(', ')}`));\n    }\n\n    return updateShard(this.client, this.className, this.shardName, this.status);\n  };\n}\n\nexport function updateShard(client: Connection, className: string, shardName: string, status: string) {\n  const path = `/schema/${className}/shards/${shardName}`;\n  return client.put(path, { status: status }, true);\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport { getShards } from './shardsGetter';\nimport { updateShard } from './shardUpdater';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { ShardStatus, ShardStatusList } from '../openapi/types';\n\nexport default class ShardsUpdater extends CommandBase {\n  private className!: string;\n  private shards: ShardStatusList;\n  private status!: string;\n\n  constructor(client: Connection) {\n    super(client);\n    this.shards = [];\n  }\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  validateClassName = () => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('className must be set - set with .withClassName(className)');\n    }\n  };\n\n  withStatus = (status: string) => {\n    this.status = status;\n    return this;\n  };\n\n  validateStatus = () => {\n    if (!isValidStringProperty(this.status)) {\n      this.addError('status must be set - set with .withStatus(status)');\n    }\n  };\n\n  validate = () => {\n    this.validateClassName();\n    this.validateStatus();\n  };\n\n  updateShards = async () => {\n    const payload: any = await Promise.all(\n      Array.from({ length: this.shards.length }, (_, i) =>\n        updateShard(this.client, this.className, this.shards[i].name || '', this.status)\n          .then((res: any) => {\n            return { name: this.shards[i].name, status: res.status };\n          })\n          .catch((err: any) => this.addError(err.toString()))\n      )\n    );\n\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error(`failed to update shards: ${this.errors.join(', ')}`));\n    }\n\n    return Promise.resolve(payload);\n  };\n\n  do = (): Promise<ShardStatusList> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error(`invalid usage: ${this.errors.join(', ')}`));\n    }\n\n    return getShards(this.client, this.className)\n      .then((shards: ShardStatusList) => (this.shards = shards))\n      .then(() => {\n        return this.updateShards();\n      })\n      .then((payload: ShardStatusList) => {\n        return payload;\n      })\n      .catch((err: any) => {\n        return Promise.reject(err);\n      });\n  };\n}\n", "import ClassCreator from './classCreator';\nimport ClassDeleter from './classDeleter';\nimport ClassGetter from './classGetter';\nimport PropertyCreator from './propertyCreator';\nimport SchemaGetter from './getter';\nimport ShardsGetter from './shardsGetter';\nimport ShardUpdater from './shardUpdater';\nimport ShardsUpdater from './shardsUpdater';\nimport Connection from '../connection';\n\nexport interface Schema {\n  classCreator: () => ClassCreator;\n  classDeleter: () => ClassDeleter;\n  classGetter: () => ClassGetter;\n  getter: () => SchemaGetter;\n  propertyCreator: () => PropertyCreator;\n  shardsGetter: () => ShardsGetter;\n  shardUpdater: () => ShardUpdater;\n  shardsUpdater: () => ShardsUpdater;\n}\n\nconst schema = (client: Connection): Schema => {\n  return {\n    classCreator: () => new ClassCreator(client),\n    classDeleter: () => new ClassDeleter(client),\n    classGetter: () => new ClassGetter(client),\n    getter: () => new SchemaGetter(client),\n    propertyCreator: () => new PropertyCreator(client),\n    shardsGetter: () => new ShardsGetter(client),\n    shardUpdater: () => new ShardUpdater(client),\n    shardsUpdater: () => new ShardsUpdater(client),\n  };\n};\n\nexport default schema;\nexport { default as ClassCreator } from './classCreator';\nexport { default as ClassDeleter } from './classDeleter';\nexport { default as ClassGetter } from './classGetter';\nexport { default as PropertyCreator } from './propertyCreator';\nexport { default as SchemaGetter } from './getter';\nexport { default as ShardUpdater } from './shardUpdater';\nexport { default as ShardsUpdater } from './shardsUpdater';\n", "import { isValidStringProperty } from '../validation/string';\nimport Connection from '../connection';\nimport { ObjectsPath } from './path';\nimport { CommandBase } from '../validation/commandBase';\nimport { Properties, WeaviateObject } from '../openapi/types';\nimport { ConsistencyLevel } from './replication';\n\nexport default class Creator extends CommandBase {\n  private className?: string;\n  private consistencyLevel?: ConsistencyLevel;\n  private id?: string;\n  private objectsPath: ObjectsPath;\n  private properties?: Properties;\n  private vector?: number[];\n\n  constructor(client: Connection, objectsPath: ObjectsPath) {\n    super(client);\n    this.objectsPath = objectsPath;\n  }\n\n  withVector = (vector: number[]) => {\n    this.vector = vector;\n    return this;\n  };\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  withProperties = (properties: Properties) => {\n    this.properties = properties;\n    return this;\n  };\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  validateClassName = () => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('className must be set - set with .withClassName(className)');\n    }\n  };\n\n  payload = () => ({\n    vector: this.vector,\n    properties: this.properties,\n    class: this.className,\n    id: this.id,\n  });\n\n  validate = () => {\n    this.validateClassName();\n  };\n\n  do = (): Promise<WeaviateObject> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    return this.objectsPath\n      .buildCreate(this.consistencyLevel)\n      .then((path: string) => this.client.post(path, this.payload()));\n  };\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { Properties } from '../openapi/types';\n\nexport default class Validator extends CommandBase {\n  private className?: string;\n  private id?: string;\n  private properties?: Properties;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  withProperties = (properties: Properties) => {\n    this.properties = properties;\n    return this;\n  };\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  validateClassName = () => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('className must be set - set with .withClassName(className)');\n    }\n  };\n\n  payload = () => ({\n    properties: this.properties,\n    class: this.className,\n    id: this.id,\n  });\n\n  validate = () => {\n    this.validateClassName();\n  };\n\n  do = () => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    const path = `/objects/validate`;\n    return this.client.post(path, this.payload(), false).then(() => true);\n  };\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport { ObjectsPath } from './path';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { Properties } from '../openapi/types';\nimport { ConsistencyLevel } from './replication';\n\nexport default class Updater extends CommandBase {\n  private className!: string;\n  private consistencyLevel?: ConsistencyLevel;\n  private id!: string;\n  private objectsPath: ObjectsPath;\n  private properties?: Properties;\n\n  constructor(client: Connection, objectsPath: ObjectsPath) {\n    super(client);\n    this.objectsPath = objectsPath;\n  }\n\n  withProperties = (properties: Properties) => {\n    this.properties = properties;\n    return this;\n  };\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  validateClassName = () => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('className must be set - use withClassName(className)');\n    }\n  };\n\n  validateId = () => {\n    if (this.id == undefined || this.id == null || this.id.length == 0) {\n      this.addError('id must be set - initialize with updater(id)');\n    }\n  };\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  payload = () => ({\n    properties: this.properties,\n    class: this.className,\n    id: this.id,\n  });\n\n  validate = () => {\n    this.validateClassName();\n    this.validateId();\n  };\n\n  do = () => {\n    this.validate();\n\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    return this.objectsPath\n      .buildUpdate(this.id, this.className, this.consistencyLevel)\n      .then((path: string) => this.client.put(path, this.payload()));\n  };\n}\n", "import Connection from '../connection';\nimport { isValidStringProperty } from '../validation/string';\nimport { ObjectsPath } from './path';\nimport { CommandBase } from '../validation/commandBase';\nimport { Properties } from '../openapi/types';\nimport { ConsistencyLevel } from './replication';\n\nexport default class Merger extends CommandBase {\n  private className!: string;\n  private consistencyLevel?: ConsistencyLevel;\n  private id!: string;\n  private objectsPath: ObjectsPath;\n  private properties?: Properties;\n\n  constructor(client: Connection, objectsPath: ObjectsPath) {\n    super(client);\n    this.objectsPath = objectsPath;\n  }\n\n  withProperties = (properties: Properties) => {\n    this.properties = properties;\n    return this;\n  };\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  validateClassName = () => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('className must be set - set with withClassName(className)');\n    }\n  };\n\n  validateId = () => {\n    if (this.id == undefined || this.id == null || this.id.length == 0) {\n      this.addError('id must be set - set with withId(id)');\n    }\n  };\n\n  payload = () => ({\n    properties: this.properties,\n    class: this.className,\n    id: this.id,\n  });\n\n  validate = () => {\n    this.validateClassName();\n    this.validateId();\n  };\n\n  do = () => {\n    this.validate();\n\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    return this.objectsPath\n      .buildMerge(this.id, this.className, this.consistencyLevel)\n      .then((path: string) => this.client.patch(path, this.payload()));\n  };\n}\n", "import Connection from '../connection';\nimport { ObjectsPath } from './path';\nimport { CommandBase } from '../validation/commandBase';\nimport { WeaviateObjectsList } from '../openapi/types';\n\nexport default class Getter extends CommandBase {\n  private additional: string[];\n  private after!: string;\n  private className?: string;\n  private limit?: number;\n  private objectsPath: ObjectsPath;\n\n  constructor(client: Connection, objectsPath: ObjectsPath) {\n    super(client);\n    this.objectsPath = objectsPath;\n    this.additional = [];\n  }\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  withAfter = (id: string) => {\n    this.after = id;\n    return this;\n  };\n\n  withLimit = (limit: number) => {\n    this.limit = limit;\n    return this;\n  };\n\n  extendAdditional = (prop: string) => {\n    this.additional = [...this.additional, prop];\n    return this;\n  };\n\n  withAdditional = (additionalFlag: any) => this.extendAdditional(additionalFlag);\n\n  withVector = () => this.extendAdditional('vector');\n\n  validate() {\n    // nothing to validate\n  }\n\n  do = (): Promise<WeaviateObjectsList> => {\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    return this.objectsPath\n      .buildGet(this.className, this.limit, this.additional, this.after)\n      .then((path: string) => {\n        return this.client.get(path);\n      });\n  };\n}\n", "import Connection from '../connection';\nimport { WeaviateObject } from '../openapi/types';\nimport { CommandBase } from '../validation/commandBase';\nimport { ObjectsPath } from './path';\nimport { ConsistencyLevel } from './replication';\n\nexport default class GetterById extends CommandBase {\n  private additional: string[];\n  private className!: string;\n  private id!: string;\n  private consistencyLevel?: ConsistencyLevel;\n  private nodeName?: string;\n  private objectsPath: ObjectsPath;\n\n  constructor(client: Connection, objectsPath: ObjectsPath) {\n    super(client);\n    this.objectsPath = objectsPath;\n    this.additional = [];\n  }\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  extendAdditional = (prop: string) => {\n    this.additional = [...this.additional, prop];\n    return this;\n  };\n\n  withAdditional = (additionalFlag: string) => this.extendAdditional(additionalFlag);\n\n  withVector = () => this.extendAdditional('vector');\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  withNodeName = (nodeName: string) => {\n    this.nodeName = nodeName;\n    return this;\n  };\n\n  validateId = () => {\n    if (this.id == undefined || this.id == null || this.id.length == 0) {\n      this.addError('id must be set - initialize with getterById(id)');\n    }\n  };\n\n  validate = () => {\n    this.validateId();\n  };\n\n  buildPath = (): Promise<string> => {\n    return this.objectsPath.buildGetOne(\n      this.id,\n      this.className,\n      this.additional,\n      this.consistencyLevel,\n      this.nodeName\n    );\n  };\n\n  do = (): Promise<WeaviateObject> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    return this.buildPath().then((path) => {\n      return this.client.get(path);\n    });\n  };\n}\n", "import Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { ObjectsPath } from './path';\nimport { ConsistencyLevel } from './replication';\n\nexport default class Deleter extends CommandBase {\n  private className!: string;\n  private consistencyLevel?: ConsistencyLevel;\n  private id!: string;\n  private objectsPath: ObjectsPath;\n\n  constructor(client: Connection, objectsPath: ObjectsPath) {\n    super(client);\n    this.objectsPath = objectsPath;\n  }\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validateId = () => {\n    this.validateIsSet(this.id, 'id', '.withId(id)');\n  };\n\n  validate = () => {\n    this.validateId();\n  };\n\n  do = () => {\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    this.validate();\n\n    return this.objectsPath\n      .buildDelete(this.id, this.className, this.consistencyLevel)\n      .then((path: string) => {\n        return this.client.delete(path, undefined, false);\n      });\n  };\n}\n", "import Connection from '../connection';\nimport { ObjectsPath } from './path';\nimport { CommandBase } from '../validation/commandBase';\n\nexport default class Checker extends CommandBase {\n  private className!: string;\n  private id!: string;\n  private objectsPath: ObjectsPath;\n\n  constructor(client: Connection, objectsPath: ObjectsPath) {\n    super(client);\n    this.objectsPath = objectsPath;\n  }\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validateId = () => {\n    this.validateIsSet(this.id, 'id', '.withId(id)');\n  };\n\n  validate = () => {\n    this.validateId();\n  };\n\n  do = () => {\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    this.validate();\n\n    return this.objectsPath.buildCheck(this.id, this.className).then((path: string) => {\n      return this.client.head(path, undefined);\n    });\n  };\n}\n", "import { BeaconPath } from '../utils/beaconPath';\nimport { ReferencesPath } from './path';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { Reference } from '../openapi/types';\nimport { ConsistencyLevel } from './replication';\n\nexport default class ReferenceCreator extends CommandBase {\n  private beaconPath: BeaconPath;\n  private className!: string;\n  private consistencyLevel?: ConsistencyLevel;\n  private id!: string;\n  private reference!: Reference;\n  private referencesPath: ReferencesPath;\n  private refProp!: string;\n\n  constructor(client: Connection, referencesPath: ReferencesPath, beaconPath: BeaconPath) {\n    super(client);\n    this.referencesPath = referencesPath;\n    this.beaconPath = beaconPath;\n  }\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  withClassName(className: string) {\n    this.className = className;\n    return this;\n  }\n\n  withReference = (ref: Reference) => {\n    this.reference = ref;\n    return this;\n  };\n\n  withReferenceProperty = (refProp: string) => {\n    this.refProp = refProp;\n    return this;\n  };\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validate = () => {\n    this.validateIsSet(this.id, 'id', '.withId(id)');\n    this.validateIsSet(this.refProp, 'referenceProperty', '.withReferenceProperty(refProp)');\n  };\n\n  payload = () => this.reference;\n\n  do = () => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    if (!this.reference.beacon) {\n      throw new Error('reference beacon must be set');\n    }\n\n    return Promise.all([\n      this.referencesPath.build(this.id, this.className, this.refProp, this.consistencyLevel),\n      this.beaconPath.rebuild(this.reference.beacon),\n    ]).then((results) => {\n      const path = results[0];\n      const beacon = results[1];\n      return this.client.post(path, { beacon }, false);\n    });\n  };\n}\n", "import Connection from '../connection';\nimport { BeaconPath } from '../utils/beaconPath';\nimport { ReferencesPath } from './path';\nimport { CommandBase } from '../validation/commandBase';\nimport { Reference } from '../openapi/types';\nimport { ConsistencyLevel } from './replication';\n\nexport default class ReferenceReplacer extends CommandBase {\n  private beaconPath: BeaconPath;\n  private className!: string;\n  private consistencyLevel?: ConsistencyLevel;\n  private id!: string;\n  private references!: Reference[];\n  private referencesPath: ReferencesPath;\n  private refProp!: string;\n\n  constructor(client: Connection, referencesPath: ReferencesPath, beaconPath: BeaconPath) {\n    super(client);\n    this.beaconPath = beaconPath;\n    this.referencesPath = referencesPath;\n  }\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  withClassName(className: string) {\n    this.className = className;\n    return this;\n  }\n\n  withReferences = (refs: any) => {\n    this.references = refs;\n    return this;\n  };\n\n  withReferenceProperty = (refProp: string) => {\n    this.refProp = refProp;\n    return this;\n  };\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validate = () => {\n    this.validateIsSet(this.id, 'id', '.withId(id)');\n    this.validateIsSet(this.refProp, 'referenceProperty', '.withReferenceProperty(refProp)');\n  };\n\n  payload = () => this.references;\n\n  do = () => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    const payloadPromise = Array.isArray(this.references)\n      ? Promise.all(this.references.map((ref) => this.rebuildReferencePromise(ref)))\n      : Promise.resolve([]);\n\n    return Promise.all([\n      this.referencesPath.build(this.id, this.className, this.refProp, this.consistencyLevel),\n      payloadPromise,\n    ]).then((results) => {\n      const path = results[0];\n      const payload = results[1];\n      return this.client.put(path, payload, false);\n    });\n  };\n\n  rebuildReferencePromise(reference: any) {\n    return this.beaconPath.rebuild(reference.beacon).then((beacon: any) => ({ beacon }));\n  }\n}\n", "import { BeaconPath } from '../utils/beaconPath';\nimport { ReferencesPath } from './path';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { Reference } from '../openapi/types';\nimport { ConsistencyLevel } from './replication';\n\nexport default class ReferenceDeleter extends CommandBase {\n  private beaconPath: BeaconPath;\n  private className!: string;\n  private consistencyLevel?: ConsistencyLevel;\n  private id!: string;\n  private reference!: Reference;\n  private referencesPath: ReferencesPath;\n  private refProp!: string;\n\n  constructor(client: Connection, referencesPath: ReferencesPath, beaconPath: BeaconPath) {\n    super(client);\n    this.referencesPath = referencesPath;\n    this.beaconPath = beaconPath;\n  }\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  withClassName(className: string) {\n    this.className = className;\n    return this;\n  }\n\n  withReference = (ref: Reference) => {\n    this.reference = ref;\n    return this;\n  };\n\n  withReferenceProperty = (refProp: string) => {\n    this.refProp = refProp;\n    return this;\n  };\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validate = () => {\n    this.validateIsSet(this.id, 'id', '.withId(id)');\n    this.validateIsSet(this.refProp, 'referenceProperty', '.withReferenceProperty(refProp)');\n  };\n\n  payload = () => this.reference;\n\n  do = () => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    if (!this.reference.beacon) {\n      throw new Error('reference beacon must be set');\n    }\n\n    return Promise.all([\n      this.referencesPath.build(this.id, this.className, this.refProp, this.consistencyLevel),\n      this.beaconPath.rebuild(this.reference.beacon),\n    ]).then((results) => {\n      const path = results[0];\n      const beacon = results[1];\n      return this.client.delete(path, { beacon }, false);\n    });\n  };\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { Reference } from '../openapi/types';\n\nexport default class ReferencePayloadBuilder extends CommandBase {\n  private className?: string;\n  private id?: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  withClassName(className: string) {\n    this.className = className;\n    return this;\n  }\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validate = () => {\n    this.validateIsSet(this.id, 'id', '.withId(id)');\n  };\n\n  payload = (): Reference => {\n    this.validate();\n    if (this.errors.length > 0) {\n      throw new Error(this.errors.join(', '));\n    }\n\n    let beacon = `weaviate://localhost`;\n    if (isValidStringProperty(this.className)) {\n      beacon = `${beacon}/${this.className}`;\n    }\n    return {\n      beacon: `${beacon}/${this.id}`,\n    };\n  };\n\n  do(): Promise<any> {\n    return Promise.reject(new Error('Should never be called'));\n  }\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport { DbVersionSupport } from '../utils/dbVersion';\nimport { ConsistencyLevel } from './replication';\n\nconst objectsPathPrefix = '/objects';\n\nexport class ObjectsPath {\n  private dbVersionSupport: DbVersionSupport;\n\n  constructor(dbVersionSupport: DbVersionSupport) {\n    this.dbVersionSupport = dbVersionSupport;\n  }\n\n  buildCreate(consistencyLevel: string | undefined): Promise<string> {\n    return this.build({ consistencyLevel }, [this.addQueryParams]);\n  }\n  buildDelete(id: string, className: string, consistencyLevel: string | undefined): Promise<string> {\n    return this.build({ id, className, consistencyLevel }, [\n      this.addClassNameDeprecatedNotSupportedCheck,\n      this.addId,\n      this.addQueryParams,\n    ]);\n  }\n  buildCheck(id: string, className: string): Promise<string> {\n    return this.build({ id, className }, [this.addClassNameDeprecatedNotSupportedCheck, this.addId]);\n  }\n  buildGetOne(\n    id: string,\n    className: string,\n    additional: string[],\n    consistencyLevel?: ConsistencyLevel,\n    nodeName?: string\n  ): Promise<string> {\n    return this.build({ id, className, additional: additional, consistencyLevel, nodeName }, [\n      this.addClassNameDeprecatedNotSupportedCheck,\n      this.addId,\n      this.addQueryParams,\n    ]);\n  }\n  buildGet(className?: string, limit?: number, additional?: string[], after?: string): Promise<string> {\n    return this.build({ className, limit, additional, after }, [this.addQueryParamsForGet]);\n  }\n  buildUpdate(id: string, className: string, consistencyLevel: string | undefined): Promise<string> {\n    return this.build({ id, className, consistencyLevel }, [\n      this.addClassNameDeprecatedCheck,\n      this.addId,\n      this.addQueryParams,\n    ]);\n  }\n  buildMerge(id: string, className: string, consistencyLevel: string | undefined): Promise<string> {\n    return this.build({ id, className, consistencyLevel }, [\n      this.addClassNameDeprecatedCheck,\n      this.addId,\n      this.addQueryParams,\n    ]);\n  }\n\n  build(params: any, modifiers: any): Promise<string> {\n    return this.dbVersionSupport.supportsClassNameNamespacedEndpointsPromise().then((support: any) => {\n      let path = objectsPathPrefix;\n      modifiers.forEach((modifier: any) => {\n        path = modifier(params, path, support);\n      });\n      return path;\n    });\n  }\n\n  addClassNameDeprecatedNotSupportedCheck(params: any, path: string, support: any) {\n    if (support.supports) {\n      if (isValidStringProperty(params.className)) {\n        return `${path}/${params.className}`;\n      } else {\n        support.warns.deprecatedNonClassNameNamespacedEndpointsForObjects();\n      }\n    } else {\n      support.warns.notSupportedClassNamespacedEndpointsForObjects();\n    }\n    return path;\n  }\n  addClassNameDeprecatedCheck(params: any, path: string, support: any) {\n    if (support.supports) {\n      if (isValidStringProperty(params.className)) {\n        return `${path}/${params.className}`;\n      } else {\n        support.warns.deprecatedNonClassNameNamespacedEndpointsForObjects();\n      }\n    }\n    return path;\n  }\n  addId(params: any, path: string) {\n    if (isValidStringProperty(params.id)) {\n      return `${path}/${params.id}`;\n    }\n    return path;\n  }\n  addQueryParams(params: any, path: string) {\n    const queryParams = [];\n    if (Array.isArray(params.additional) && params.additional.length > 0) {\n      queryParams.push(`include=${params.additional.join(',')}`);\n    }\n    if (isValidStringProperty(params.nodeName)) {\n      queryParams.push(`node_name=${params.nodeName}`);\n    }\n    if (isValidStringProperty(params.consistencyLevel)) {\n      queryParams.push(`consistency_level=${params.consistencyLevel}`);\n    }\n    if (queryParams.length > 0) {\n      return `${path}?${queryParams.join('&')}`;\n    }\n    return path;\n  }\n  addQueryParamsForGet(params: any, path: string, support: any) {\n    const queryParams = [];\n    if (Array.isArray(params.additional) && params.additional.length > 0) {\n      queryParams.push(`include=${params.additional.join(',')}`);\n    }\n    if (typeof params.limit == 'number' && params.limit > 0) {\n      queryParams.push(`limit=${params.limit}`);\n    }\n    if (isValidStringProperty(params.className)) {\n      if (support.supports) {\n        queryParams.push(`class=${params.className}`);\n      } else {\n        support.warns.notSupportedClassParameterInEndpointsForObjects();\n      }\n    }\n    if (isValidStringProperty(params.after)) {\n      queryParams.push(`after=${params.after}`);\n    }\n    if (queryParams.length > 0) {\n      return `${path}?${queryParams.join('&')}`;\n    }\n    return path;\n  }\n}\n\nexport class ReferencesPath {\n  private dbVersionSupport: DbVersionSupport;\n\n  constructor(dbVersionSupport: DbVersionSupport) {\n    this.dbVersionSupport = dbVersionSupport;\n  }\n\n  build(\n    id: string,\n    className: string,\n    property: string,\n    consistencyLevel?: ConsistencyLevel\n  ): Promise<string> {\n    return this.dbVersionSupport.supportsClassNameNamespacedEndpointsPromise().then((support: any) => {\n      let path = objectsPathPrefix;\n      if (support.supports) {\n        if (isValidStringProperty(className)) {\n          path = `${path}/${className}`;\n        } else {\n          support.warns.deprecatedNonClassNameNamespacedEndpointsForReferences();\n        }\n      } else {\n        support.warns.notSupportedClassNamespacedEndpointsForReferences();\n      }\n      if (isValidStringProperty(id)) {\n        path = `${path}/${id}`;\n      }\n      path = `${path}/references`;\n      if (isValidStringProperty(property)) {\n        path = `${path}/${property}`;\n      }\n      if (isValidStringProperty(consistencyLevel)) {\n        path = `${path}?consistency_level=${consistencyLevel}`;\n      }\n      return path;\n    });\n  }\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport { DbVersionSupport } from './dbVersion';\n\nconst beaconPathPrefix = 'weaviate://localhost';\n\nexport class BeaconPath {\n  private dbVersionSupport: DbVersionSupport;\n  private beaconRegExp: RegExp;\n\n  constructor(dbVersionSupport: DbVersionSupport) {\n    this.dbVersionSupport = dbVersionSupport;\n    // matches\n    // weaviate://localhost/class/id    => match[2] = class, match[4] = id\n    // weaviate://localhost/class/id/   => match[2] = class, match[4] = id\n    // weaviate://localhost/id          => match[2] = id, match[4] = undefined\n    // weaviate://localhost/id/         => match[2] = id, match[4] = undefined\n    this.beaconRegExp = /^weaviate:\\/\\/localhost(\\/([^\\\\/]+))?(\\/([^\\\\/]+))?[\\\\/]?$/gi;\n  }\n\n  async rebuild(beacon: string) {\n    const support = await this.dbVersionSupport.supportsClassNameNamespacedEndpointsPromise();\n    const match = new RegExp(this.beaconRegExp).exec(beacon);\n    if (!match) {\n      return beacon;\n    }\n    let className;\n    let id;\n    if (match[4] !== undefined) {\n      id = match[4];\n      className = match[2];\n    } else {\n      id = match[2];\n    }\n    let beaconPath = beaconPathPrefix;\n    if (support.supports) {\n      if (isValidStringProperty(className)) {\n        beaconPath = `${beaconPath}/${className}`;\n      } else {\n        support.warns.deprecatedNonClassNameNamespacedEndpointsForBeacons();\n      }\n    } else {\n      support.warns.notSupportedClassNamespacedEndpointsForBeacons();\n    }\n    if (isValidStringProperty(id)) {\n      beaconPath = `${beaconPath}/${id}`;\n    }\n    return beaconPath;\n  }\n}\n", "import Creator from './creator';\nimport Validator from './validator';\nimport Updater from './updater';\nimport Merger from './merger';\nimport Getter from './getter';\nimport GetterById from './getterById';\nimport Deleter from './deleter';\nimport Checker from './checker';\nimport ReferenceCreator from './referenceCreator';\nimport ReferenceReplacer from './referenceReplacer';\nimport ReferenceDeleter from './referenceDeleter';\nimport ReferencePayloadBuilder from './referencePayloadBuilder';\nimport { ObjectsPath, ReferencesPath } from './path';\nimport { BeaconPath } from '../utils/beaconPath';\nimport { DbVersionSupport } from '../utils/dbVersion';\nimport Connection from '../connection';\n\nexport interface Data {\n  creator: () => Creator;\n  validator: () => Validator;\n  updater: () => Updater;\n  merger: () => Merger;\n  getter: () => Getter;\n  getterById: () => GetterById;\n  deleter: () => Deleter;\n  checker: () => Checker;\n  referenceCreator: () => ReferenceCreator;\n  referenceReplacer: () => ReferenceReplacer;\n  referenceDeleter: () => ReferenceDeleter;\n  referencePayloadBuilder: () => ReferencePayloadBuilder;\n}\n\nconst data = (client: Connection, dbVersionSupport: DbVersionSupport): Data => {\n  const objectsPath = new ObjectsPath(dbVersionSupport);\n  const referencesPath = new ReferencesPath(dbVersionSupport);\n  const beaconPath = new BeaconPath(dbVersionSupport);\n\n  return {\n    creator: () => new Creator(client, objectsPath),\n    validator: () => new Validator(client),\n    updater: () => new Updater(client, objectsPath),\n    merger: () => new Merger(client, objectsPath),\n    getter: () => new Getter(client, objectsPath),\n    getterById: () => new GetterById(client, objectsPath),\n    deleter: () => new Deleter(client, objectsPath),\n    checker: () => new Checker(client, objectsPath),\n    referenceCreator: () => new ReferenceCreator(client, referencesPath, beaconPath),\n    referenceReplacer: () => new ReferenceReplacer(client, referencesPath, beaconPath),\n    referenceDeleter: () => new ReferenceDeleter(client, referencesPath, beaconPath),\n    referencePayloadBuilder: () => new ReferencePayloadBuilder(client),\n  };\n};\n\nexport default data;\nexport { default as Creator } from './creator';\nexport { default as Validator } from './validator';\nexport { default as Updater } from './updater';\nexport { default as Merger } from './merger';\nexport { default as Getter } from './getter';\nexport { default as GetterById } from './getterById';\nexport { default as Deleter } from './deleter';\nexport { default as Checker } from './checker';\nexport { default as ReferenceCreator } from './referenceCreator';\nexport { default as ReferenceReplacer } from './referenceReplacer';\nexport { default as ReferenceDeleter } from './referenceDeleter';\nexport { default as ReferencePayloadBuilder } from './referencePayloadBuilder';\n\nexport type { ConsistencyLevel } from './replication';\n", "import Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { Classification } from '../openapi/types';\n\nexport default class ClassificationsGetter extends CommandBase {\n  private id?: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withId = (id: string) => {\n    this.id = id;\n    return this;\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string): void => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validateId = (): void => {\n    this.validateIsSet(this.id, 'id', '.withId(id)');\n  };\n\n  validate = (): void => {\n    this.validateId();\n  };\n\n  do = (): Promise<Classification> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    const path = `/classifications/${this.id}`;\n    return this.client.get(path);\n  };\n}\n", "import ClassificationsGetter from './getter';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { Classification } from '../openapi/types';\n\nexport default class ClassificationsScheduler extends CommandBase {\n  private basedOnProperties?: string[];\n  private classifyProperties?: string[];\n  private className?: string;\n  private settings?: any;\n  private type?: string;\n  private waitForCompletion: boolean;\n  private waitTimeout: number;\n\n  constructor(client: Connection) {\n    super(client);\n    this.waitTimeout = 10 * 60 * 1000; // 10 minutes\n    this.waitForCompletion = false;\n  }\n\n  withType = (type: string) => {\n    this.type = type;\n    return this;\n  };\n\n  withSettings = (settings: any) => {\n    this.settings = settings;\n    return this;\n  };\n\n  withClassName = (className: string) => {\n    this.className = className;\n    return this;\n  };\n\n  withClassifyProperties = (props: string[]) => {\n    this.classifyProperties = props;\n    return this;\n  };\n\n  withBasedOnProperties = (props: string[]) => {\n    this.basedOnProperties = props;\n    return this;\n  };\n\n  withWaitForCompletion = () => {\n    this.waitForCompletion = true;\n    return this;\n  };\n\n  withWaitTimeout = (timeout: number) => {\n    this.waitTimeout = timeout;\n    return this;\n  };\n\n  validateIsSet = (prop: string | undefined | null | any[], name: string, setter: string): void => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validateClassName = (): void => {\n    this.validateIsSet(this.className, 'className', '.withClassName(className)');\n  };\n\n  validateBasedOnProperties = (): void => {\n    this.validateIsSet(\n      this.basedOnProperties,\n      'basedOnProperties',\n      '.withBasedOnProperties(basedOnProperties)'\n    );\n  };\n\n  validateClassifyProperties = (): void => {\n    this.validateIsSet(\n      this.classifyProperties,\n      'classifyProperties',\n      '.withClassifyProperties(classifyProperties)'\n    );\n  };\n\n  validate = (): void => {\n    this.validateClassName();\n    this.validateClassifyProperties();\n    this.validateBasedOnProperties();\n  };\n\n  payload = (): Classification => ({\n    type: this.type,\n    settings: this.settings,\n    class: this.className,\n    classifyProperties: this.classifyProperties,\n    basedOnProperties: this.basedOnProperties,\n  });\n\n  pollForCompletion = (id: any): Promise<Classification> => {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        clearInterval(interval);\n        clearTimeout(timeout);\n        reject(\n          new Error(\n            \"classification didn't finish within configured timeout, \" +\n              'set larger timeout with .withWaitTimeout(timeout)'\n          )\n        );\n      }, this.waitTimeout);\n\n      const interval = setInterval(() => {\n        new ClassificationsGetter(this.client)\n          .withId(id)\n          .do()\n          .then((res: Classification) => {\n            if (res.status === 'completed') {\n              clearInterval(interval);\n              clearTimeout(timeout);\n              resolve(res);\n            }\n          });\n      }, 500);\n    });\n  };\n\n  do = (): Promise<Classification> => {\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    this.validate();\n\n    const path = `/classifications`;\n    return this.client.post(path, this.payload()).then((res: any) => {\n      if (!this.waitForCompletion) {\n        return Promise.resolve(res);\n      }\n\n      return this.pollForCompletion(res.id);\n    });\n  };\n}\n", "import ClassificationsScheduler from './scheduler';\nimport ClassificationsGetter from './getter';\nimport Connection from '../connection';\n\nexport interface Classifications {\n  scheduler: () => ClassificationsScheduler;\n  getter: () => ClassificationsGetter;\n}\n\nconst data = (client: Connection): Classifications => {\n  return {\n    scheduler: () => new ClassificationsScheduler(client),\n    getter: () => new ClassificationsGetter(client),\n  };\n};\n\nexport default data;\nexport { default as ClassificationsGetter } from './getter';\nexport { default as ClassificationsScheduler } from './scheduler';\n", "export function buildObjectsPath(queryParams: any): string {\n  const path = '/batch/objects';\n  return buildPath(path, queryParams);\n}\n\nexport function buildRefsPath(queryParams: any): string {\n  const path = '/batch/references';\n  return buildPath(path, queryParams);\n}\n\nfunction buildPath(path: string, queryParams: any): string {\n  if (queryParams && queryParams.toString() != '') {\n    path = `${path}?${queryParams.toString()}`;\n  }\n  return path;\n}\n", "import { buildObjectsPath } from './path';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { BatchRequest, WeaviateObject, WeaviateObjectsGet } from '../openapi/types';\nimport { ConsistencyLevel } from '../data/replication';\n\nexport default class ObjectsBatcher extends CommandBase {\n  private consistencyLevel?: ConsistencyLevel;\n  public objects: WeaviateObject[];\n\n  constructor(client: Connection) {\n    super(client);\n    this.objects = [];\n  }\n\n  /**\n   * can be called as:\n   *  - withObjects(...[obj1, obj2, obj3])\n   *  - withObjects(obj1, obj2, obj3)\n   *  - withObjects(obj1)\n   * @param  {...WeaviateObject[]} objects\n   */\n  withObjects(...objects: WeaviateObject[]) {\n    let objs = objects;\n    if (objects.length && Array.isArray(objects[0])) {\n      objs = objects[0];\n    }\n    this.objects = [...this.objects, ...objs];\n    return this;\n  }\n\n  withObject(object: WeaviateObject) {\n    return this.withObjects(object);\n  }\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  payload = (): BatchRequest => ({\n    objects: this.objects,\n  });\n\n  validateObjectCount = (): void => {\n    if (this.objects.length == 0) {\n      this.addError('need at least one object to send a request, add one with .withObject(obj)');\n    }\n  };\n\n  validate = (): void => {\n    this.validateObjectCount();\n  };\n\n  do = (): Promise<WeaviateObjectsGet[]> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    const params = new URLSearchParams();\n    if (this.consistencyLevel) {\n      params.set('consistency_level', this.consistencyLevel);\n    }\n    const path = buildObjectsPath(params);\n    return this.client.post(path, this.payload());\n  };\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport { buildObjectsPath } from './path';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { BatchDelete, BatchDeleteResponse, WhereFilter } from '../openapi/types';\nimport { ConsistencyLevel } from '../data/replication';\nimport { DeleteOutput } from '.';\n\nexport default class ObjectsBatchDeleter extends CommandBase {\n  private className?: string;\n  private consistencyLevel?: ConsistencyLevel;\n  private dryRun?: boolean;\n  private output?: DeleteOutput;\n  private whereFilter?: WhereFilter;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withClassName(className: string) {\n    this.className = className;\n    return this;\n  }\n\n  withWhere(whereFilter: WhereFilter) {\n    this.whereFilter = whereFilter;\n    return this;\n  }\n\n  withOutput(output: DeleteOutput) {\n    this.output = output;\n    return this;\n  }\n\n  withDryRun(dryRun: boolean) {\n    this.dryRun = dryRun;\n    return this;\n  }\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  payload = (): BatchDelete => {\n    return {\n      match: {\n        class: this.className,\n        where: this.whereFilter,\n      },\n      output: this.output,\n      dryRun: this.dryRun,\n    };\n  };\n\n  validateClassName = (): void => {\n    if (!isValidStringProperty(this.className)) {\n      this.addError('string className must be set - set with .withClassName(className)');\n    }\n  };\n\n  validateWhereFilter = (): void => {\n    if (typeof this.whereFilter != 'object') {\n      this.addError('object where must be set - set with .withWhere(whereFilter)');\n    }\n  };\n\n  validate = (): void => {\n    this.validateClassName();\n    this.validateWhereFilter();\n  };\n\n  do = (): Promise<BatchDeleteResponse> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    const params = new URLSearchParams();\n    if (this.consistencyLevel) {\n      params.set('consistency_level', this.consistencyLevel);\n    }\n    const path = buildObjectsPath(params);\n    return this.client.delete(path, this.payload(), true);\n  };\n}\n", "import { buildRefsPath } from './path';\nimport { BeaconPath } from '../utils/beaconPath';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { BatchReference, BatchReferenceResponse } from '../openapi/types';\nimport { ConsistencyLevel } from '../data/replication';\n\nexport default class ReferencesBatcher extends CommandBase {\n  private beaconPath: BeaconPath;\n  private consistencyLevel?: ConsistencyLevel;\n  public references: BatchReference[];\n\n  constructor(client: Connection, beaconPath: BeaconPath) {\n    super(client);\n    this.beaconPath = beaconPath;\n    this.references = [];\n  }\n\n  /**\n   * can be called as:\n   *  - withReferences(...[ref1, ref2, ref3])\n   *  - withReferences(ref1, ref2, ref3)\n   *  - withReferences(ref1)\n   * @param  {...BatchReference[]} references\n   */\n  withReferences(...references: BatchReference[]) {\n    let refs = references;\n    if (references.length && Array.isArray(references[0])) {\n      refs = references[0];\n    }\n    this.references = [...this.references, ...refs];\n    return this;\n  }\n\n  withReference(reference: BatchReference) {\n    return this.withReferences(reference);\n  }\n\n  withConsistencyLevel = (cl: ConsistencyLevel) => {\n    this.consistencyLevel = cl;\n    return this;\n  };\n\n  payload = (): BatchReference[] => this.references;\n\n  validateReferenceCount = (): void => {\n    if (this.references.length == 0) {\n      this.addError('need at least one reference to send a request, add one with .withReference(obj)');\n    }\n  };\n\n  validate = () => {\n    this.validateReferenceCount();\n  };\n\n  do = (): Promise<BatchReferenceResponse[]> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    const params = new URLSearchParams();\n    if (this.consistencyLevel) {\n      params.set('consistency_level', this.consistencyLevel);\n    }\n    const path = buildRefsPath(params);\n    const payloadPromise = Promise.all(this.references.map((ref) => this.rebuildReferencePromise(ref)));\n\n    return payloadPromise.then((payload) => this.client.post(path, payload));\n  };\n\n  rebuildReferencePromise = (reference: BatchReference): Promise<BatchReference> => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.beaconPath.rebuild(reference.to!).then((beaconTo: any) => ({\n      from: reference.from,\n      to: beaconTo,\n    }));\n  };\n}\n", "import { isValidStringProperty } from '../validation/string';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { BatchReference } from '../openapi/types';\n\nexport default class ReferencesBatcher extends CommandBase {\n  private fromClassName?: string;\n  private fromId?: string;\n  private fromRefProp?: string;\n  private toClassName?: string;\n  private toId?: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withFromId = (id: string) => {\n    this.fromId = id;\n    return this;\n  };\n\n  withToId = (id: string) => {\n    this.toId = id;\n    return this;\n  };\n\n  withFromClassName = (className: string) => {\n    this.fromClassName = className;\n    return this;\n  };\n\n  withFromRefProp = (refProp: string) => {\n    this.fromRefProp = refProp;\n    return this;\n  };\n\n  withToClassName(className: string) {\n    this.toClassName = className;\n    return this;\n  }\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string): void => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validate = (): void => {\n    this.validateIsSet(this.fromId, 'fromId', '.withFromId(id)');\n    this.validateIsSet(this.toId, 'toId', '.withToId(id)');\n    this.validateIsSet(this.fromClassName, 'fromClassName', '.withFromClassName(className)');\n    this.validateIsSet(this.fromRefProp, 'fromRefProp', '.withFromRefProp(refProp)');\n  };\n\n  payload = (): BatchReference => {\n    this.validate();\n    if (this.errors.length > 0) {\n      throw new Error(this.errors.join(', '));\n    }\n\n    let beaconTo = `weaviate://localhost`;\n    if (isValidStringProperty(this.toClassName)) {\n      beaconTo = `${beaconTo}/${this.toClassName}`;\n    }\n\n    return {\n      from: `weaviate://localhost/${this.fromClassName}/${this.fromId}/${this.fromRefProp}`,\n      to: `${beaconTo}/${this.toId}`,\n    };\n  };\n\n  do = (): Promise<any> => {\n    return Promise.reject(new Error('Should never be called'));\n  };\n}\n", "import ObjectsBatcher from './objectsBatcher';\nimport ObjectsBatchDeleter from './objectsBatchDeleter';\nimport ReferencesBatcher from './referencesBatcher';\nimport ReferencePayloadBuilder from './referencePayloadBuilder';\nimport { BeaconPath } from '../utils/beaconPath';\nimport { DbVersionSupport } from '../utils/dbVersion';\nimport Connection from '../connection';\n\nexport type DeleteOutput = 'verbose' | 'minimal';\nexport type DeleteResultStatus = 'SUCCESS' | 'FAILED' | 'DRYRUN';\n\nexport interface Batch {\n  objectsBatcher: () => ObjectsBatcher;\n  objectsBatchDeleter: () => ObjectsBatchDeleter;\n  referencesBatcher: () => ReferencesBatcher;\n  referencePayloadBuilder: () => ReferencePayloadBuilder;\n}\n\nconst batch = (client: Connection, dbVersionSupport: DbVersionSupport): Batch => {\n  const beaconPath = new BeaconPath(dbVersionSupport);\n\n  return {\n    objectsBatcher: () => new ObjectsBatcher(client),\n    objectsBatchDeleter: () => new ObjectsBatchDeleter(client),\n    referencesBatcher: () => new ReferencesBatcher(client, beaconPath),\n    referencePayloadBuilder: () => new ReferencePayloadBuilder(client),\n  };\n};\n\nexport default batch;\nexport { default as ObjectsBatcher } from './objectsBatcher';\nexport { default as ObjectsBatchDeleter } from './objectsBatchDeleter';\nexport { default as ReferencesBatcher } from './referencesBatcher';\n", "import Connection from '../connection';\nimport { DbVersionProvider } from '../utils/dbVersion';\nimport { CommandBase } from '../validation/commandBase';\n\nexport default class LiveChecker extends CommandBase {\n  private dbVersionProvider: DbVersionProvider;\n\n  constructor(client: Connection, dbVersionProvider: DbVersionProvider) {\n    super(client);\n    this.dbVersionProvider = dbVersionProvider;\n  }\n\n  validate() {\n    // nothing to validate\n  }\n\n  do = () => {\n    return this.client\n      .get('/.well-known/live', false)\n      .then(() => {\n        setTimeout(() => this.dbVersionProvider.refresh());\n        return Promise.resolve(true);\n      })\n      .catch(() => Promise.resolve(false));\n  };\n}\n", "import { DbVersionProvider } from '../utils/dbVersion';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\n\nexport default class ReadyChecker extends CommandBase {\n  private dbVersionProvider: DbVersionProvider;\n\n  constructor(client: Connection, dbVersionProvider: DbVersionProvider) {\n    super(client);\n    this.dbVersionProvider = dbVersionProvider;\n  }\n\n  validate() {\n    // nothing to validate\n  }\n\n  do = () => {\n    return this.client\n      .get('/.well-known/ready', false)\n      .then(() => {\n        setTimeout(() => this.dbVersionProvider.refresh());\n        return Promise.resolve(true);\n      })\n      .catch(() => Promise.resolve(false));\n  };\n}\n", "import Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\n\nexport default class MetaGetter extends CommandBase {\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  validate() {\n    // nothing to validate\n  }\n\n  do = () => {\n    return this.client.get('/meta', true);\n  };\n}\n", "import LiveChecker from './liveChecker';\nimport ReadyChecker from './readyChecker';\nimport MetaGetter from './metaGetter';\nimport OpenidConfigurationGetter from './openidConfigurationGetter';\nimport Connection from '../connection';\nimport { DbVersionProvider } from '../utils/dbVersion';\n\nexport interface Misc {\n  liveChecker: () => LiveChecker;\n  readyChecker: () => ReadyChecker;\n  metaGetter: () => MetaGetter;\n  openidConfigurationGetter: () => OpenidConfigurationGetter;\n}\n\nconst misc = (client: Connection, dbVersionProvider: DbVersionProvider): Misc => {\n  return {\n    liveChecker: () => new LiveChecker(client, dbVersionProvider),\n    readyChecker: () => new ReadyChecker(client, dbVersionProvider),\n    metaGetter: () => new MetaGetter(client),\n    openidConfigurationGetter: () => new OpenidConfigurationGetter(client.http),\n  };\n};\n\nexport default misc;\nexport { default as LiveChecker } from './liveChecker';\nexport { default as ReadyChecker } from './readyChecker';\nexport { default as MetaGetter } from './metaGetter';\nexport { default as OpenidConfigurationGetter } from './openidConfigurationGetter';\n", "import Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { C11yExtension } from '../openapi/types';\n\nexport default class ExtensionCreator extends CommandBase {\n  private concept?: string;\n  private definition?: string;\n  private weight?: number;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withConcept = (concept: string) => {\n    this.concept = concept;\n    return this;\n  };\n\n  withDefinition = (definition: string) => {\n    this.definition = definition;\n    return this;\n  };\n\n  withWeight = (weight: number) => {\n    this.weight = weight;\n    return this;\n  };\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string): void => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  validate = (): void => {\n    this.validateIsSet(this.concept, 'concept', 'withConcept(concept)');\n    this.validateIsSet(this.definition, 'definition', 'withDefinition(definition)');\n    this.validateIsSet(this.weight?.toString() || '', 'weight', 'withWeight(weight)');\n  };\n\n  payload = (): C11yExtension => ({\n    concept: this.concept,\n    definition: this.definition,\n    weight: this.weight,\n  });\n\n  do = (): Promise<C11yExtension> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    const path = `/modules/text2vec-contextionary/extensions`;\n    return this.client.post(path, this.payload());\n  };\n}\n", "import Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { C11yWordsResponse } from '../openapi/types';\n\nexport default class ConceptsGetter extends CommandBase {\n  private concept?: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  validateIsSet = (prop: string | undefined | null, name: string, setter: string) => {\n    if (prop == undefined || prop == null || prop.length == 0) {\n      this.addError(`${name} must be set - set with ${setter}`);\n    }\n  };\n\n  withConcept = (concept: string) => {\n    this.concept = concept;\n    return this;\n  };\n\n  validate = (): void => {\n    this.validateIsSet(this.concept, 'concept', 'withConcept(concept)');\n  };\n\n  do = (): Promise<C11yWordsResponse> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    const path = `/modules/text2vec-contextionary/concepts/${this.concept}`;\n    return this.client.get(path);\n  };\n}\n", "import ExtensionCreator from './extensionCreator';\nimport ConceptsGetter from './conceptsGetter';\nimport Connection from '../connection';\n\nexport interface C11y {\n  conceptsGetter: () => ConceptsGetter;\n  extensionCreator: () => ExtensionCreator;\n}\n\nconst c11y = (client: Connection): C11y => {\n  return {\n    conceptsGetter: () => new ConceptsGetter(client),\n    extensionCreator: () => new ExtensionCreator(client),\n  };\n};\n\nexport default c11y;\nexport { default as ExtensionCreator } from './extensionCreator';\nexport { default as ConceptsGetter } from './conceptsGetter';\n", "export class DbVersionSupport {\n  private dbVersionProvider: VersionProvider;\n\n  constructor(dbVersionProvider: VersionProvider) {\n    this.dbVersionProvider = dbVersionProvider;\n  }\n\n  supportsClassNameNamespacedEndpointsPromise() {\n    return this.dbVersionProvider.getVersionPromise().then((version?: string) => ({\n      version,\n      supports: this.supportsClassNameNamespacedEndpoints(version),\n      warns: {\n        deprecatedNonClassNameNamespacedEndpointsForObjects: () =>\n          console.warn(\n            `Usage of objects paths without className is deprecated in Weaviate ${version}. Please provide className parameter`\n          ),\n        deprecatedNonClassNameNamespacedEndpointsForReferences: () =>\n          console.warn(\n            `Usage of references paths without className is deprecated in Weaviate ${version}. Please provide className parameter`\n          ),\n        deprecatedNonClassNameNamespacedEndpointsForBeacons: () =>\n          console.warn(\n            `Usage of beacons paths without className is deprecated in Weaviate ${version}. Please provide className parameter`\n          ),\n        notSupportedClassNamespacedEndpointsForObjects: () =>\n          console.warn(\n            `Usage of objects paths with className is not supported in Weaviate ${version}. className parameter is ignored`\n          ),\n        notSupportedClassNamespacedEndpointsForReferences: () =>\n          console.warn(\n            `Usage of references paths with className is not supported in Weaviate ${version}. className parameter is ignored`\n          ),\n        notSupportedClassNamespacedEndpointsForBeacons: () =>\n          console.warn(\n            `Usage of beacons paths with className is not supported in Weaviate ${version}. className parameter is ignored`\n          ),\n        notSupportedClassParameterInEndpointsForObjects: () =>\n          console.warn(\n            `Usage of objects paths with class query parameter is not supported in Weaviate ${version}. class query parameter is ignored`\n          ),\n      },\n    }));\n  }\n\n  // >= 1.14\n  supportsClassNameNamespacedEndpoints(version?: string) {\n    if (typeof version === 'string') {\n      const versionNumbers = version.split('.');\n      if (versionNumbers.length >= 2) {\n        const major = parseInt(versionNumbers[0], 10);\n        const minor = parseInt(versionNumbers[1], 10);\n        return (major == 1 && minor >= 14) || major >= 2;\n      }\n    }\n    return false;\n  }\n}\n\nconst EMPTY_VERSION = '';\n\nexport interface VersionProvider {\n  getVersionPromise(): Promise<string>;\n}\n\nexport class DbVersionProvider implements VersionProvider {\n  private versionPromise?: Promise<string>;\n  private readonly emptyVersionPromise: Promise<string>;\n  private versionGetter: () => Promise<string>;\n\n  constructor(versionGetter: () => Promise<string>) {\n    this.versionGetter = versionGetter;\n\n    this.emptyVersionPromise = Promise.resolve(EMPTY_VERSION);\n    this.versionPromise = undefined;\n  }\n\n  getVersionPromise(): Promise<string> {\n    if (this.versionPromise) {\n      return this.versionPromise;\n    }\n    return this.versionGetter().then((version) => this.assignPromise(version));\n  }\n\n  refresh(force = false): Promise<boolean> {\n    if (force || !this.versionPromise) {\n      this.versionPromise = undefined;\n      return this.versionGetter()\n        .then((version) => this.assignPromise(version))\n        .then(() => Promise.resolve(true));\n    }\n    return Promise.resolve(false);\n  }\n\n  assignPromise(version: string): Promise<string> {\n    if (version === EMPTY_VERSION) {\n      return this.emptyVersionPromise;\n    }\n    this.versionPromise = Promise.resolve(version);\n    return this.versionPromise;\n  }\n}\n", "import { isValidStringProperty } from '../validation/string';\n\nexport function validateIncludeClassNames(classNames?: string[]) {\n  if (Array.isArray(classNames)) {\n    const errors: any[] = [];\n    classNames.forEach((className) => {\n      if (!isValidStringProperty(className)) {\n        errors.push('string className invalid - set with .withIncludeClassNames(...classNames)');\n      }\n    });\n    return errors;\n  }\n  if (classNames !== null && classNames !== undefined) {\n    return ['strings classNames invalid - set with .withIncludeClassNames(...classNames)'];\n  }\n  return [];\n}\n\nexport function validateExcludeClassNames(classNames?: string[]) {\n  if (Array.isArray(classNames)) {\n    const errors: any[] = [];\n    classNames.forEach((className) => {\n      if (!isValidStringProperty(className)) {\n        errors.push('string className invalid - set with .withExcludeClassNames(...classNames)');\n      }\n    });\n    return errors;\n  }\n  if (classNames !== null && classNames !== undefined) {\n    return ['strings classNames invalid - set with .withExcludeClassNames(...classNames)'];\n  }\n  return [];\n}\n\nexport function validateBackend(backend?: string) {\n  if (!isValidStringProperty(backend)) {\n    return ['string backend must set - set with .withBackend(backend)'];\n  }\n  return [];\n}\n\nexport function validateBackupId(backupId?: string) {\n  if (!isValidStringProperty(backupId)) {\n    return ['string backupId must be set - set with .withBackupId(backupId)'];\n  }\n  return [];\n}\n", "import {\n  validateBackend,\n  validateBackupId,\n  validateExcludeClassNames,\n  validateIncludeClassNames,\n} from './validation';\nimport BackupCreateStatusGetter from './backupCreateStatusGetter';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { BackupCreateRequest, BackupCreateResponse, BackupCreateStatusResponse } from '../openapi/types';\nimport { Backend } from '.';\n\nconst WAIT_INTERVAL = 1000;\n\nexport default class BackupCreator extends CommandBase {\n  private backend!: Backend;\n  private backupId!: string;\n  private excludeClassNames?: string[];\n  private includeClassNames?: string[];\n  private statusGetter: BackupCreateStatusGetter;\n  private waitForCompletion!: boolean;\n\n  constructor(client: Connection, statusGetter: BackupCreateStatusGetter) {\n    super(client);\n    this.statusGetter = statusGetter;\n  }\n\n  withIncludeClassNames(...classNames: string[]) {\n    let cls = classNames;\n    if (classNames.length && Array.isArray(classNames[0])) {\n      cls = classNames[0];\n    }\n    this.includeClassNames = cls;\n    return this;\n  }\n\n  withExcludeClassNames(...classNames: string[]) {\n    let cls = classNames;\n    if (classNames.length && Array.isArray(classNames[0])) {\n      cls = classNames[0];\n    }\n    this.excludeClassNames = cls;\n    return this;\n  }\n\n  withBackend(backend: Backend) {\n    this.backend = backend;\n    return this;\n  }\n\n  withBackupId(backupId: string) {\n    this.backupId = backupId;\n    return this;\n  }\n\n  withWaitForCompletion(waitForCompletion: boolean) {\n    this.waitForCompletion = waitForCompletion;\n    return this;\n  }\n\n  validate = (): void => {\n    this.addErrors([\n      ...validateIncludeClassNames(this.includeClassNames),\n      ...validateExcludeClassNames(this.excludeClassNames),\n      ...validateBackend(this.backend),\n      ...validateBackupId(this.backupId),\n    ]);\n  };\n\n  do = (): Promise<BackupCreateResponse> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    const payload = {\n      id: this.backupId,\n      config: {},\n      include: this.includeClassNames,\n      exclude: this.excludeClassNames,\n    } as BackupCreateRequest;\n\n    if (this.waitForCompletion) {\n      return this._createAndWaitForCompletion(payload);\n    }\n    return this._create(payload);\n  };\n\n  _create = (payload: BackupCreateRequest): Promise<BackupCreateResponse> => {\n    return this.client.post(this._path(), payload) as Promise<BackupCreateResponse>;\n  };\n\n  _createAndWaitForCompletion = (payload: BackupCreateRequest): Promise<BackupCreateResponse> => {\n    return new Promise<BackupCreateResponse>((resolve, reject) => {\n      this._create(payload)\n        .then((createResponse: any) => {\n          this.statusGetter.withBackend(this.backend).withBackupId(this.backupId);\n\n          const loop = () => {\n            this.statusGetter\n              .do()\n              .then((createStatusResponse: any) => {\n                if (createStatusResponse.status == 'SUCCESS' || createStatusResponse.status == 'FAILED') {\n                  resolve(this._merge(createStatusResponse, createResponse));\n                } else {\n                  setTimeout(loop, WAIT_INTERVAL);\n                }\n              })\n              .catch(reject);\n          };\n\n          loop();\n        })\n        .catch(reject);\n    });\n  };\n\n  private _path = (): string => {\n    return `/backups/${this.backend}`;\n  };\n\n  _merge = (\n    createStatusResponse: BackupCreateStatusResponse,\n    createResponse: BackupCreateResponse\n  ): BackupCreateResponse => {\n    const merged: BackupCreateResponse = {};\n    if ('id' in createStatusResponse) {\n      merged.id = createStatusResponse.id;\n    }\n    if ('path' in createStatusResponse) {\n      merged.path = createStatusResponse.path;\n    }\n    if ('backend' in createStatusResponse) {\n      merged.backend = createStatusResponse.backend;\n    }\n    if ('status' in createStatusResponse) {\n      merged.status = createStatusResponse.status;\n    }\n    if ('error' in createStatusResponse) {\n      merged.error = createStatusResponse.error;\n    }\n    if ('classes' in createResponse) {\n      merged.classes = createResponse.classes;\n    }\n    return merged;\n  };\n}\n", "import Connection from '../connection';\nimport { validateBackupId, validateBackend } from './validation';\nimport { CommandBase } from '../validation/commandBase';\nimport { BackupCreateStatusResponse } from '../openapi/types';\nimport { Backend } from '.';\n\nexport default class BackupCreateStatusGetter extends CommandBase {\n  private backend?: Backend;\n  private backupId?: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withBackend(backend: Backend) {\n    this.backend = backend;\n    return this;\n  }\n\n  withBackupId(backupId: string) {\n    this.backupId = backupId;\n    return this;\n  }\n\n  validate = (): void => {\n    this.addErrors([...validateBackend(this.backend), ...validateBackupId(this.backupId)]);\n  };\n\n  do = (): Promise<BackupCreateStatusResponse> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n    return this.client.get(this._path()) as Promise<BackupCreateStatusResponse>;\n  };\n\n  private _path = (): string => {\n    return `/backups/${this.backend}/${this.backupId}`;\n  };\n}\n", "import {\n  validateBackend,\n  validateBackupId,\n  validateExcludeClassNames,\n  validateIncludeClassNames,\n} from './validation';\nimport Connection from '../connection';\nimport BackupRestoreStatusGetter from './backupRestoreStatusGetter';\nimport { CommandBase } from '../validation/commandBase';\nimport { BackupRestoreRequest, BackupRestoreResponse, BackupRestoreStatusResponse } from '../openapi/types';\nimport { Backend } from '.';\n\nconst WAIT_INTERVAL = 1000;\n\nexport default class BackupRestorer extends CommandBase {\n  private backend!: Backend;\n  private backupId!: string;\n  private excludeClassNames?: string[];\n  private includeClassNames?: string[];\n  private statusGetter: BackupRestoreStatusGetter;\n  private waitForCompletion?: boolean;\n\n  constructor(client: Connection, statusGetter: BackupRestoreStatusGetter) {\n    super(client);\n    this.statusGetter = statusGetter;\n  }\n\n  withIncludeClassNames(...classNames: string[]) {\n    let cls = classNames;\n    if (classNames.length && Array.isArray(classNames[0])) {\n      cls = classNames[0];\n    }\n    this.includeClassNames = cls;\n    return this;\n  }\n\n  withExcludeClassNames(...classNames: string[]) {\n    let cls = classNames;\n    if (classNames.length && Array.isArray(classNames[0])) {\n      cls = classNames[0];\n    }\n    this.excludeClassNames = cls;\n    return this;\n  }\n\n  withBackend(backend: Backend) {\n    this.backend = backend;\n    return this;\n  }\n\n  withBackupId(backupId: string) {\n    this.backupId = backupId;\n    return this;\n  }\n\n  withWaitForCompletion(waitForCompletion: boolean) {\n    this.waitForCompletion = waitForCompletion;\n    return this;\n  }\n\n  validate = (): void => {\n    this.addErrors([\n      ...validateIncludeClassNames(this.includeClassNames || []),\n      ...validateExcludeClassNames(this.excludeClassNames || []),\n      ...validateBackend(this.backend),\n      ...validateBackupId(this.backupId),\n    ]);\n  };\n\n  do = (): Promise<BackupRestoreResponse> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    const payload = {\n      config: {},\n      include: this.includeClassNames,\n      exclude: this.excludeClassNames,\n    } as BackupRestoreRequest;\n\n    if (this.waitForCompletion) {\n      return this._restoreAndWaitForCompletion(payload);\n    }\n    return this._restore(payload);\n  };\n\n  _restore = (payload: BackupRestoreRequest): Promise<BackupRestoreResponse> => {\n    return this.client.post(this._path(), payload);\n  };\n\n  _restoreAndWaitForCompletion = (payload: BackupRestoreRequest): Promise<BackupRestoreResponse> => {\n    return new Promise<BackupRestoreResponse>((resolve, reject) => {\n      this._restore(payload)\n        .then((restoreResponse: any) => {\n          this.statusGetter.withBackend(this.backend).withBackupId(this.backupId);\n\n          const loop = () => {\n            this.statusGetter\n              .do()\n              .then((restoreStatusResponse: any) => {\n                if (restoreStatusResponse.status == 'SUCCESS' || restoreStatusResponse.status == 'FAILED') {\n                  resolve(this._merge(restoreStatusResponse, restoreResponse));\n                } else {\n                  setTimeout(loop, WAIT_INTERVAL);\n                }\n              })\n              .catch(reject);\n          };\n\n          loop();\n        })\n        .catch(reject);\n    });\n  };\n\n  private _path = (): string => {\n    return `/backups/${this.backend}/${this.backupId}/restore`;\n  };\n\n  _merge = (\n    restoreStatusResponse: BackupRestoreStatusResponse,\n    restoreResponse: BackupRestoreResponse\n  ): BackupRestoreResponse => {\n    const merged: BackupRestoreResponse = {};\n    if ('id' in restoreStatusResponse) {\n      merged.id = restoreStatusResponse.id;\n    }\n    if ('path' in restoreStatusResponse) {\n      merged.path = restoreStatusResponse.path;\n    }\n    if ('backend' in restoreStatusResponse) {\n      merged.backend = restoreStatusResponse.backend;\n    }\n    if ('status' in restoreStatusResponse) {\n      merged.status = restoreStatusResponse.status;\n    }\n    if ('error' in restoreStatusResponse) {\n      merged.error = restoreStatusResponse.error;\n    }\n    if ('classes' in restoreResponse) {\n      merged.classes = restoreResponse.classes;\n    }\n    return merged;\n  };\n}\n", "import { validateBackupId, validateBackend } from './validation';\nimport Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\nimport { BackupRestoreStatusResponse } from '../openapi/types';\nimport { Backend } from '.';\n\nexport default class BackupRestoreStatusGetter extends CommandBase {\n  private backend?: Backend;\n  private backupId?: string;\n\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  withBackend(backend: Backend) {\n    this.backend = backend;\n    return this;\n  }\n\n  withBackupId(backupId: string) {\n    this.backupId = backupId;\n    return this;\n  }\n\n  validate = (): void => {\n    this.addErrors([...validateBackend(this.backend), ...validateBackupId(this.backupId)]);\n  };\n\n  do = (): Promise<BackupRestoreStatusResponse> => {\n    this.validate();\n    if (this.errors.length > 0) {\n      return Promise.reject(new Error('invalid usage: ' + this.errors.join(', ')));\n    }\n\n    return this.client.get(this._path());\n  };\n\n  private _path = (): string => {\n    return `/backups/${this.backend}/${this.backupId}/restore`;\n  };\n}\n", "import BackupCreator from './backupCreator';\nimport BackupCreateStatusGetter from './backupCreateStatusGetter';\nimport BackupRestorer from './backupRestorer';\nimport BackupRestoreStatusGetter from './backupRestoreStatusGetter';\nimport Connection from '../connection';\n\nexport type Backend = 'filesystem' | 's3' | 'gcs' | 'azure';\nexport type BackupStatus = 'STARTED' | 'TRANSFERRING' | 'TRANSFERRED' | 'SUCCESS' | 'FAILED';\n\nexport interface Backup {\n  creator: () => BackupCreator;\n  createStatusGetter: () => BackupCreateStatusGetter;\n  restorer: () => BackupRestorer;\n  restoreStatusGetter: () => BackupRestoreStatusGetter;\n}\n\nconst backup = (client: Connection): Backup => {\n  return {\n    creator: () => new BackupCreator(client, new BackupCreateStatusGetter(client)),\n    createStatusGetter: () => new BackupCreateStatusGetter(client),\n    restorer: () => new BackupRestorer(client, new BackupRestoreStatusGetter(client)),\n    restoreStatusGetter: () => new BackupRestoreStatusGetter(client),\n  };\n};\n\nexport default backup;\nexport { default as BackupCreator } from './backupCreator';\nexport { default as BackupCreateStatusGetter } from './backupCreateStatusGetter';\nexport { default as BackupRestorer } from './backupRestorer';\nexport { default as BackupRestoreStatusGetter } from './backupRestoreStatusGetter';\n", "import Connection from '../connection';\nimport { CommandBase } from '../validation/commandBase';\n\nexport default class NodesStatusGetter extends CommandBase {\n  constructor(client: Connection) {\n    super(client);\n  }\n\n  validate() {\n    // nothing to validate\n  }\n\n  do() {\n    return this.client.get('/nodes');\n  }\n}\n", "import NodesStatusGetter from './nodesStatusGetter';\nimport Connection from '../connection';\n\nexport type NodeStatus = 'HEALTHY' | 'UNHEALTHY' | 'UNAVAILABLE';\n\nexport interface Cluster {\n  nodesStatusGetter: () => NodesStatusGetter;\n}\n\nconst cluster = (client: Connection): Cluster => {\n  return {\n    nodesStatusGetter: () => new NodesStatusGetter(client),\n  };\n};\n\nexport default cluster;\nexport { default as NodesStatusGetter } from './nodesStatusGetter';\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Aggregator", "ApiKey", "AuthAccessTokenCredentials", "AuthClientCredentials", "AuthUserPasswordCredentials", "BackupCreateStatusGetter", "BackupCreator", "BackupRestoreStatusGetter", "BackupRestorer", "Checker", "ClassCreator", "ClassDeleter", "ClassGetter", "ClassificationsGetter", "ClassificationsScheduler", "ConceptsGetter", "Creator", "Deleter", "Explorer", "ExtensionCreator", "Getter", "GetterById", "GraphQLGetter", "LiveChecker", "Merger", "MetaGetter", "NodesStatusGetter", "ObjectsBatchDeleter", "ObjectsBatcher", "OidcAuthenticator", "OpenidConfigurationGetterGetter", "PropertyCreator", "RawGraphQL", "ReadyChecker", "ReferenceCreator", "ReferenceDeleter", "ReferencePayloadBuilder", "ReferenceReplacer", "ReferencesBatcher", "SchemaGetter", "ShardUpdater", "ShardsUpdater", "Updater", "Validator", "src_default", "__toCommonJS", "OidcAuthenticator", "http", "creds", "localConfig", "config", "authenticator", "AuthUserPasswordCredentials", "UserPasswordAuthenticator", "AuthAccessTokenCredentials", "AccessTokenAuthenticator", "AuthClientCredentials", "ClientCredentialsAuthenticator", "resp", "openidProviderConfig", "scopes", "parseSilentRefresh", "tokenResp", "calcExpirationEpoch", "err", "url", "params", "contentType", "ApiKey", "apiKey", "expiresIn", "silentRefresh", "OpenidConfigurationGetterGetter", "client", "res", "import_isomorphic_fetch", "httpClient", "config", "baseUri", "url", "makeUrl", "path", "payload", "expectReturnContent", "bearerToken", "request", "addAuthHeaderIfNeeded", "fetch", "makeCheckStatus", "handleHeadResponse", "externalUrl", "body", "contentType", "basePath", "expectResponseBody", "res", "errText", "err", "httpClient_default", "import_graphql_request", "gqlClient", "config", "scheme", "host", "defaultHeaders", "query", "variables", "headers", "Client", "data", "gqlClient_default", "Connection", "params", "path", "payload", "expectReturnContent", "token", "query", "variables", "headers", "localConfig", "OpenidConfigurationGetterGetter", "httpClient_default", "gqlClient_default", "OidcAuthenticator", "GraphQLWhere", "whereObj", "valueContent", "parts", "gc", "gcParts", "d", "dParts", "key", "op", "path", "value", "ops", "element", "GraphQLNearText", "args", "moveToArgs", "moveAwayFromArgs", "move", "objects", "moveObjects", "i", "objs", "GraphQLNearVector", "args", "wrap", "GraphQLNearObject", "args", "wrap", "isValidIntProperty", "input", "isValidPositiveIntProperty", "CommandBase", "client", "error", "errors", "Aggregator", "CommandBase", "client", "fields", "className", "where", "GraphQLWhere", "e", "args", "GraphQLNearText", "GraphQLNearObject", "GraphQLNearVector", "objectLimit", "isValidPositiveIntProperty", "limit", "groupBy", "prop", "name", "setter", "params", "GraphQLBm25", "args", "GraphQLHybrid", "args", "GraphQLNearImage", "args", "wrap", "img", "base64part", "GraphQLAsk", "args", "wrap", "GraphQLGroup", "args", "parts", "GraphQLSort", "args", "parts", "arg", "part", "GraphQLGenerate", "args", "str", "results", "GraphQLGetter", "CommandBase", "client", "fields", "className", "id", "args", "GraphQLGroup", "e", "whereObj", "GraphQLWhere", "GraphQLNearText", "GraphQLBm25", "GraphQLHybrid", "GraphQLNearObject", "askObj", "GraphQLAsk", "GraphQLNearImage", "GraphQLNearVector", "limit", "offset", "GraphQLSort", "GraphQLGenerate", "prop", "name", "setter", "params", "Explorer", "CommandBase", "client", "fields", "limit", "args", "GraphQLNearText", "e", "GraphQLNearObject", "GraphQLAsk", "GraphQLNearImage", "GraphQLNearVector", "prop", "name", "setter", "params", "RawGraphQL", "CommandBase", "client", "query", "prop", "name", "setter", "params", "graphql", "client", "GraphQLGetter", "Aggregator", "Explorer", "RawGraphQL", "graphql_default", "ClassCreator", "CommandBase", "client", "classObj", "path", "isValidStringProperty", "input", "ClassDeleter", "CommandBase", "client", "className", "isValidStringProperty", "path", "ClassGetter", "CommandBase", "client", "className", "isValidStringProperty", "path", "PropertyCreator", "CommandBase", "client", "className", "property", "isValidStringProperty", "path", "SchemaGetter", "CommandBase", "client", "path", "ShardsGetter", "CommandBase", "client", "className", "isValidStringProperty", "getShards", "path", "ShardUpdater", "CommandBase", "client", "className", "isValidStringProperty", "shardName", "status", "updateShard", "path", "ShardsUpdater", "CommandBase", "client", "className", "isValidStringProperty", "status", "payload", "_", "i", "updateShard", "res", "err", "getShards", "shards", "schema", "client", "ClassCreator", "ClassDeleter", "ClassGetter", "SchemaGetter", "PropertyCreator", "ShardsGetter", "ShardUpdater", "ShardsUpdater", "schema_default", "Creator", "CommandBase", "client", "objectsPath", "vector", "className", "properties", "id", "cl", "isValidStringProperty", "path", "Validator", "CommandBase", "client", "className", "properties", "id", "isValidStringProperty", "path", "Updater", "CommandBase", "client", "objectsPath", "properties", "id", "className", "isValidStringProperty", "cl", "path", "Merger", "CommandBase", "client", "objectsPath", "properties", "className", "id", "cl", "isValidStringProperty", "path", "Getter", "CommandBase", "client", "objectsPath", "className", "id", "limit", "prop", "additionalFlag", "path", "GetterById", "CommandBase", "client", "objectsPath", "id", "className", "prop", "additionalFlag", "cl", "nodeName", "path", "Deleter", "CommandBase", "client", "objectsPath", "id", "className", "cl", "prop", "name", "setter", "path", "Checker", "CommandBase", "client", "objectsPath", "id", "className", "prop", "name", "setter", "path", "ReferenceCreator", "CommandBase", "client", "referencesPath", "beaconPath", "id", "ref", "refProp", "cl", "prop", "name", "setter", "results", "path", "beacon", "className", "ReferenceReplacer", "CommandBase", "client", "referencesPath", "beaconPath", "id", "refs", "refProp", "cl", "prop", "name", "setter", "payloadPromise", "ref", "results", "path", "payload", "className", "reference", "beacon", "ReferenceDeleter", "CommandBase", "client", "referencesPath", "beaconPath", "id", "ref", "refProp", "cl", "prop", "name", "setter", "results", "path", "beacon", "className", "ReferencePayloadBuilder", "CommandBase", "client", "id", "prop", "name", "setter", "beacon", "isValidStringProperty", "className", "objectsPathPrefix", "ObjectsPath", "dbVersionSupport", "consistencyLevel", "id", "className", "additional", "nodeName", "limit", "after", "params", "modifiers", "support", "path", "modifier", "isValidStringProperty", "queryParams", "ReferencesPath", "property", "beaconPathPrefix", "BeaconPath", "dbVersionSupport", "beacon", "support", "match", "className", "id", "beaconPath", "isValidStringProperty", "data", "client", "dbVersionSupport", "objectsPath", "ObjectsPath", "referencesPath", "ReferencesPath", "beaconPath", "BeaconPath", "Creator", "Validator", "Updater", "Merger", "Getter", "GetterById", "Deleter", "Checker", "ReferenceCreator", "ReferenceReplacer", "ReferenceDeleter", "ReferencePayloadBuilder", "data_default", "ClassificationsGetter", "CommandBase", "client", "id", "prop", "name", "setter", "path", "ClassificationsScheduler", "CommandBase", "client", "type", "settings", "className", "props", "timeout", "prop", "name", "setter", "id", "resolve", "reject", "interval", "ClassificationsGetter", "res", "path", "data", "client", "ClassificationsScheduler", "ClassificationsGetter", "classifications_default", "buildObjectsPath", "queryParams", "buildPath", "buildRefsPath", "path", "ObjectsBatcher", "CommandBase", "client", "cl", "params", "path", "buildObjectsPath", "objects", "objs", "object", "ObjectsBatchDeleter", "CommandBase", "client", "cl", "isValidStringProperty", "params", "path", "buildObjectsPath", "className", "whereFilter", "output", "dryRun", "ReferencesBatcher", "CommandBase", "client", "beaconPath", "cl", "params", "path", "buildRefsPath", "ref", "payload", "reference", "beaconTo", "references", "refs", "ReferencesBatcher", "CommandBase", "client", "id", "className", "refProp", "prop", "name", "setter", "beaconTo", "isValidStringProperty", "batch", "client", "dbVersionSupport", "beaconPath", "BeaconPath", "ObjectsBatcher", "ObjectsBatchDeleter", "ReferencesBatcher", "batch_default", "LiveChecker", "CommandBase", "client", "dbVersionProvider", "ReadyChecker", "CommandBase", "client", "dbVersionProvider", "MetaGetter", "CommandBase", "client", "misc", "client", "dbVersionProvider", "LiveChecker", "ReadyChecker", "MetaGetter", "OpenidConfigurationGetterGetter", "misc_default", "ExtensionCreator", "CommandBase", "client", "concept", "definition", "weight", "prop", "name", "setter", "path", "ConceptsGetter", "CommandBase", "client", "prop", "name", "setter", "concept", "path", "c11y", "client", "ConceptsGetter", "ExtensionCreator", "c11y_default", "DbVersionSupport", "dbVersionProvider", "version", "versionNumbers", "major", "minor", "EMPTY_VERSION", "DbVersionProvider", "versionGetter", "force", "validateIncludeClassNames", "classNames", "errors", "className", "isValidStringProperty", "validateExcludeClassNames", "validateBackend", "backend", "validateBackupId", "backupId", "WAIT_INTERVAL", "BackupCreator", "CommandBase", "client", "statusGetter", "validateIncludeClassNames", "validateExcludeClassNames", "validateBackend", "validateBackupId", "payload", "resolve", "reject", "createResponse", "loop", "createStatusResponse", "merged", "classNames", "cls", "backend", "backupId", "waitForCompletion", "BackupCreateStatusGetter", "CommandBase", "client", "validateBackend", "validateBackupId", "backend", "backupId", "WAIT_INTERVAL", "BackupRestorer", "CommandBase", "client", "statusGetter", "validateIncludeClassNames", "validateExcludeClassNames", "validateBackend", "validateBackupId", "payload", "resolve", "reject", "restoreResponse", "loop", "restoreStatusResponse", "merged", "classNames", "cls", "backend", "backupId", "waitForCompletion", "BackupRestoreStatusGetter", "CommandBase", "client", "validateBackend", "validateBackupId", "backend", "backupId", "backup", "client", "BackupCreator", "BackupCreateStatusGetter", "BackupRestorer", "BackupRestoreStatusGetter", "backup_default", "NodesStatusGetter", "CommandBase", "client", "cluster", "client", "NodesStatusGetter", "cluster_default", "app", "params", "conn", "Connection", "dbVersionProvider", "initDbVersionProvider", "dbVersionSupport", "DbVersionSupport", "ifc", "graphql_default", "schema_default", "data_default", "classifications_default", "batch_default", "misc_default", "c11y_default", "backup_default", "cluster_default", "ApiKey", "AuthUserPasswordCredentials", "AuthAccessTokenCredentials", "AuthClientCredentials", "metaGetter", "MetaGetter", "versionGetter", "result", "DbVersionProvider", "src_default"]
}
